<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec_dev_basic_shell_commands">
  <title>Basic Shell Commands</title>
  <introduction>
  <p>
    In this section, we explore basic shell commands related to files, directories, and navigation.
  </p>
  <p>
    Disclaimer: It is beyond the scope of this book to cover anything but a small number of shell commands needed for contributions to open source, so the subsections below cover only the  essentials.
  </p>
  </introduction>

<subsection xml:id="subsec-files_directories_privileges">
  <title>Files, Directories, and Privileges</title>
  <p>
    This and subsequent subsections are written to be followed as an extended exercise with explanations given as we go.
  </p>
    <exercise xml:id="exercise-try-cli">
    <title>Exercise: Try shell commands for navigation</title>
    <p>Try each of the following commands on your own machine.</p>
  </exercise>
      <p>
      First, follow the directions given in <xref ref="subsec-getting_terminal"/> to open a terminal window so you can use your shell. All of the shell commands will be typed in this terminal window.
      </p>
      <paragraphs>
        <title>Introduction to Shell Commands</title>
        <p>
        </p>
      <p>
        Shell commands are simply commands that are typed into the shell. As our very first shell command to try, let's try the <c>echo</c> command which simply echos or displays the argument(s) to the terminal.  Try the following with or without the quotes:
      </p>
      <pre>
      echo "I love open source!"
      </pre>
      <p>
        You should have seen the text "I love open source!" printed in the terminal. Now if that were all the <c>echo</c> command could do, it would be a fairly pointless command. The <c>echo</c> command's real power is in displaying the contents of variables and files as we will soon see.
      </p>


      <p> The shell is designed to work in an OS which is a multi-user environment. Type in the following command to see your username:
          </p>
    <pre>
    whoami
    </pre>
    <p>
      The shell should respond with the username that you created when you set up your system.  For me that is <c>pearcej</c>. 
    </p>
 
    <p>
      Note that your environment might be <term>case sensitive</term>, which means that it might discriminate between uppercase and lowercase letters, where two words that in letter cases only, are not considered equal. This means that <c>Echo</c>, <c>ECHO</c>, <c>WhoAmI</c>, and <c>WHOAMI</c>  might not be recognized as commands, so you are in a case-sensitive environment and accidentally type one of these, you will elicit a response like:
      </p>

      <pre>
        Command 'WhoAmI' not found
      </pre>

    <p>
      or if you are in a case-sensitive environment and you are lucky, you might get something more helpful like:
    </p>
    <pre>
      Command 'Echo' not found, did you mean:
          command 'echo'
    </pre>

      <p>
        Sometimes it is helpful to be able to remember some information or look up previously stored information. This can be accomplished using environment variables. An <term>environment variable</term> is a value that contains information about the system environment or the currently logged-in user. Having environment variables is a way of keeping track of information about the system environment and serves as a way to pass information about the environment to programs. For example, the operating system sets a bunch of environment variables which store information about the environment. As just one example, you might wonder how the operating system keeps track of its users. For each user, there is a user environment variable called USER that is specific only to the currently logged-in user. The shell will expand environment variables and that `echo` is useful to show us the results of that, so the USER environment variable can be accessed using the <c>echo</c> command that we already saw.  Try the following:
      </p>

      <pre>
        echo $USER
      </pre>
    <p>
      You should see the same result as you saw with the <c>whoami</c> command! Note that you must precede the variable name with a dollar sign $ whenever you reference the value it contains. Isn't it interesting to peek inside the environment variable in that way? 
    </p>
    <p>
      In fact, one of the key uses of the <c>echo</c> command is to echo the values of variables, which the shell can expand. Let's see another example:
     </p>
  
     <pre>
     echo $SHELL
     </pre>

     <p>
      You will likely see something like the following printed:
     </p>
     <pre>
      /bin/bash
     </pre>
     <p>
     The reason you see something like this is because the SHELL environment variable stores the location of the shell program. This location, called the <term>file path</term>, is given in the form of the path needed to find the location. We explore how this path is described in the next section. 
     </p>

  </paragraphs>
    <paragraphs>
      <title>Files and File Systems</title>
      <p>
      </p>
    <p> 
      Before computers became popular, a <term>file</term> and a <term>folder</term> referred to a container for a collection of documents. Operating systems use these terms very similarly. A file refers to a document and a folder or, synonymously, a <term>directory</term> refers to a collection of files and sub-directories. The operating system handles how files and directories are represented on a physical storage medium, how they are read from, and written to. You may be most familiar with accessing files through a graphical user interface. Creating a new document corresponds to creating a new file.
      Often, when opening an application that deals with documents, it will suggest documents you have recently worked with. These each correspond to a file, each of which is stored in a directory somewhere, and knowing where files are in your file directory will be important to working on open source. 
    </p>
     <p>
      You might (or might not) be familiar with using folders to organize our files and to navigate the file system. (On an iphone or Android phone, you make a new folder by dropping one app on top of another app, on a Mac you long press and then choose new folder, and on a Windows machine, you right-click and choose New > folder.) This type of organization is important to understand, and the folder metaphor is useful. In fact, there are two useful metaphors to help with our understanding of file systems. 
     </p>
     <p>
      When using the shell,  "folders" are more typically called "directories", but the two terms are equivalent. 
     </p>
         <p>
      Inside of a directory, we can find files and possibly additional directories. Since directories may contain other directories in addition to files, the directories on your computer form a hierarchy. Each directory is contained within another directory, which we refer to as its <term>parent</term>. The only exception to this rule is the  <term>root directory</term>, which can be a parent to other directories, but has no parent itself. It is therefore the top-level directory from which we can reach any other directory. Each file and directory in the file system can be referred to by its unique <term>path</term>. 
      The root directory always has the path <term>/</term>, and a file can thus be identified by its path through the file system beginning from the root node. 
      If there is a folder named <c>myfolder</c> located in the root directory, its path would be <c>/myfolder</c>. If <c>myfolder</c> then contains a file named <c>hello.txt</c>, its path would be <c>/myfolder/hello.txt</c>. If <c>/myfolder</c> contains a directory named <c>/mydocuments</c>, its path would be <c>/myfolder/mydocuments</c>. And so on."
    <notation>
      <usage><m>/</m></usage>
      <description>root directory symbol</description>
    </notation>
  </p>
  <p>
    Note that the term <em>root directory</em> shouldn't be confused with the term <em>root user</em> in a Linux-like system. The <term>root user</term> is a user named <em>root</em>, which is a special superuser account in Linux operating systems that has unrestricted read and write privileges to everything. The <em>root directory</em> should also not be confused with the <c>/root</c> folder which is found on some Linux-based systems and which is the home directory of the root superuser. 
  </p>
      <p>Let's get our bearings and see which directory we are currently in. The <c>pwd</c> command stands for <em>print working directory</em> and as the name says it prints the path of the directory you are working in. Try typing:
      </p>
      <pre>
      pwd
      </pre>
      <p>
      When I type this, I see the following (but you will likely see a different path):
    </p>
    <pre>
    /home/pearcej
    </pre>
      <p>
        
        Reading the path from right to left, using the folder metaphor, this means I am in a directory named <c>pearcej</c> which itself is a inside of a directory called <c>home</c> which is itself inside of the root directory, <c>/</c>. Note that the position with respect to the forward slash <c>/</c> tells us the direction of the relationship â€“ further to the right is further inside.  To use the tree terminology, a directory that has a file or second directory directly inside of it is called a <term>parent</term> of the file or second directory that is inside, while the file or second directory is called the <term>child</term> of the parent directory. Hence, <c>pearcej</c>  is a child of <c>home</c> and <c>home</c> is a child of the root directory <c>/</c> in our example.
      </p>
      <p>
       Let's try "moving" (i.e. changing our working directory) to the root directory. Use the <c>cd</c> command which stands for <em>change directory</em> followed by the <c>/</c>:
      </p>
      <pre>
      cd /
      </pre>
      <p>
      This should transport you to the <term>root directory</term> (if you weren't there already.) Now when you use <c>pwd</c>, you should see <c>/</c> echoed back. 
      </p>
      <p>
      Next type the following <c>ls</c> to get a <em>listing</em> of the files and subdirectories in the <em>current working directory</em>.
      </p>
      <pre>
      ls
      </pre>

      <p>
        You should see a listing of files and directories.
      </p>

      </paragraphs>
      <paragraphs>
        <title>Shell Command Options</title>
        <p>
        </p>
        <p>
      Many shell commands have options which can be invoked by using a <term>command option</term>, which is also called a <term>flag</term>.
        Let's try using a command option with <c>ls</c>, the listing command. Try typing the following where the <c>-r</c> option stands for <c>reverse</c>, and it reverses the sorting order:
      </p>
      <pre>
      ls -r
      </pre>
      <p>
      To try another, try typing the following where the <c>-l</c> option stands for <em>long listing format</em>, meaning that instead of output containing only the names of files and directories, the <c>ls</c> command will produce additional information, assuming you have at least one file or directory.
      </p>
          
<pre>
ls -l
</pre>
<p>
  You are likely to see some lines that look something like this, each of which corresponds to one file or subdirectory in your current working directory. The exact output you get will vary based on the directory you are in and what files and folders exist on your machine:
</p>
<pre>
drwxr-xr-x  3 root    root     4096 Jun 19 10:55 home
lrwxrwxrwx  1 root    root        7 Mar 24  2022 bin -> usr/bin
-rw-rw-r--  1 pearcej friends    22 Sep 15  2022 hello.txt
</pre>

<p>
  Thus, the <c>-l</c> flag changed how the listing is displayed.
</p>
    
</paragraphs>
<paragraphs>
    <title>File Permissions</title>
  <p>
    
  </p>

  <p>
    Let's return to the example from the previous section by exploring what we get in a long listing. In particular, let's explore the permissions portions of the lines produced by the <c>ls -l</c> command. 
  </p>

  <pre>
cd ~
ls -l
</pre>
<p>
  You should get something that looks similar to the following, of course your files and directories are likely to differ.
</p>
<pre>
drwxr-xr-x  3 pearcej pearcej   4096 Jun 19 10:55 home
lrwxrwxrwx  1 root    pearcej      7 Mar 24  2022 bin -> usr/bin
-rw-rw-r--  1 pearcej friends     22 Apr 15  2023 hello.txt
</pre>
<p>
  The last item on each of these lines is the filename itself. The first item in each of the lines is a 10 character-long mix of letters and minus signs. The first character of that set indicates the file type where <c>d</c> tells us it is a directory, <c>l</c> indicates it is a symbolic link, and <c>-</c> indicates it is a regular file. (Note that a <term>symbolic link</term>, aka <term>symlink</term> or <term>soft link</term> is a special type of file that acts as a shortcut by pointing to some other file or directory.)
  The next nine characters display various permissions for the file. The first set of three characters (characters 2-4) are the user's (i.e. the file owner's) permissions, the next three are the group's permissions, and the last three are the permissions for all others. (The user's name  is in the third column and the group name is in the fourth column.) In each of these sets of three characters, the three characters refer to read (<c>r</c>), write (<c>w</c>), and execute (<c>x</c>) respectively. If you see a letter then that permission is allowed, and if you see a '-', the permission is disallowed. For example in the last of the three lines shown above, we see that the file <c>hello.txt</c> has permissions of <c>-rw-rw-r--</c>. This means this is a file that can be read and written (changed) but not executed by the owner <c>pearcej</c> and also by any user who is a member of the <c>friends</c> group, however other users can only read the file.
</p>
<p>
  Occasionally, you need to change permissions of a file. For example, you might need to change permissions to make a file executable. Changing file permissions is done with the <c>chmod</c> command. We will explore this in a bit.
</p>
   </paragraphs>

   <paragraphs>
    <title>Learning More About Command Options</title>
    <p>
    </p>
  <p>
    If you want to see all of the command options for a given command, there are two different methods for many commands. You can often, but not always, use the <c>--help</c> option on the command or you can use the <term>manual</term> which is accessed using the <c>man</c> command. For example, with the <c>ls</c> command, you can use either one of the following, noting that they work a bit differently because the manual may use paging. If it does, to go to the next page use the space bar.
  </p>
      <pre>
      ls --help
      man ls
      </pre>
      <p>
        Note that since both <c>--help</c> and <c>man</c> are not consistently both available, it is worth knowing both. That way, if one doesn't work, you can try the other.
      </p>
      <p>
      You may be wondering about the use of one minus sign '-' vs the use of two minus signs '--' in shell options. One minus sign is typically used for single letter commands, while two is typically used for word-length commands, although even this is not a hard and fast rule. You'll occasionally get programs that also use a single `-` for word-length commands.
        If you look back at the help and/or manual results for <c>ls</c>, you may see that the options <c>-a</c> and <c>--all</c> both list all files including that begin with a '.', which are the hidden files  and directories. Besides brevity, one advantage the single minus sign often offers, is that to run multiple options at the same time, all you often need to do is concatenate them. Note that this is also program-specific; not all programs will allow this, but it is convenient when it is offered! For example, <c>ls -lra</c> returns the result with  the <c>-l</c>,  <c>-r</c>, and <c>-a</c> option flags all activated. Give it a try!
      </p>
      <pre>
      ls -lra
      </pre>
  </paragraphs>
  <paragraphs>
    <title>Creating and Removing Directories</title>
    <p>
    </p>
        <p>
        Next, let's go to your <term>home</term> directory which is referenced by the special tilde '~' character as follows:
      <notation>
      <usage><m>\tilde{}</m></usage>
      <description>home directory symbol</description>
    </notation>
      </p>
    <pre>
   cd ~
    </pre>
      <p>
        Then print your working directory and list your files just to see that you have been transported again. 
      </p>

      <p>
        You can make a new directory using the <c>mkdir</c> command. For example, let's say you want to make a new directory with the name <em>newdir</em>, you can type the following:
        </p> 
        <pre>
         mkdir newdir
        </pre>
        <p>
          To check that the directory was created as expected, you can get a fresh listing of your files and directories with <c>ls -l</c>. The output should include a line that ends in `newdir`. Try it!
        </p>
        <pre>
        drwxr-xr-x  2 pearcej pearcej   4096 Nov 15 17:00 newdir
        </pre>
        <p>
          Then you can descend into the new directory and see where you are with:
      </p>
        <pre>
          cd newdir
          pwd
        </pre>

      <p> You should note that your working directory has changed!
        One might expect not to see anything when running the <c>ls</c> command in an empty directory, but try it with the following options:
      </p>
    <pre>
      ls -la
    </pre>
      <p>
        You are likely to see something like the following:
      </p>
    <pre>
  drwxr-xr-x  2 pearcej pearcej 4096 Nov 16 17:00 .
  drwxr-xr-x 13 pearcej pearcej 4096 Nov 16 17:00 ..
    </pre>
      <p>
      Note the period at the end of the first line where the filename is expected. A period or dot (.) represents the current directory. The double period or double dot (..) represents the parent directory of the current one.
      <notation>
      <usage><m>.</m></usage>
      <description>current directory symbol</description>
    </notation>
      <notation>
      <usage><m>..</m></usage>
      <description>parent directory symbol</description>
    </notation>
  </p>
  <p>
      You can use this dot notation as a reference as well, so <c>ls ..</c>, will list all the files and directories in the parent directory relative to where you are so you don't have to change directories to get the listing from another directory. Try it!
    </p>
    <p>
    You can even use these dots in combination with folder names.


    For example, if you are inside of the <c>newdir</c> directory and you want to make a sibling directory called <c>newdir2</c>, you can type the following:
    </p>
   <pre>
   mkdir ../newdir2
   ls -l ..
   </pre>
  <p>
   Here, the first command creates a new directory named <c>newdir2</c> as a child of our current parent directory. This makes <c>newdir2</c> a sibling of the original <c>newdir</c> directory because both have the same parent directory. The second line produces a long listing of all of the files and directories in the directory that is one level up relative to the current working  directory. 
    You should see both of the directories that you made listed as subdirectories.
    </p>
    <p>
    If you want to delete either of these new empty directories, you can use the <term>remove directory</term> command, <c>rmdir</c> followed by the name of the directory you want to remove. Note that there are other ways to remove directories, but <term>remove directory</term> is useful because it refuses to delete a directory that is not empty. Give it a try!
  </p>
  <p>
    A handy use of the <c>cd</c> command is to use <c>cd -</c> which  will take you to your previous working directory. This is handy if you need to move between two distant locations. Try it followed by <c>pwd</c>a couple of times.
  </p>
  <pre>
  cd -
  pwd
  </pre>

  </paragraphs>
  <paragraphs>
    <title>Input and Output Redirection</title>
    <p>
    </p>
    <p>
    There are a number of ways one can create a new file. Let's try some. First, use <c>cd</c> to descend into one of your new directories if you are not already in one so that you are in an empty directory. Then let's try the following commands:
    </p>
       <pre>
 touch newfile1.txt
 echo 'I love open source!' > newfile2.txt
 echo 'I really love open source!' >> newfile3.txt
 ls
   </pre>
   <p>
   You should now see three new files named <em>newfile1.txt</em>, <em>newfile2.txt</em>, and <em>newfile3.txt</em> respectively. 
   This particular usage of the <c>touch</c> command simply makes an empty file if no file by that name already exists in the directory. 
   It is a niche use case for the command, but people use it this 
   way with regularity.
   The intended purpose of the <c>touch</c> changes the last accessed/modified date.
   Understanding the result of the first line we typed is pretty straightforward. The second and third lines that we typed require a bit more explanation. As we learned  above, the <c>echo</c> command simply outputs (or echoes) the argument(s) to the terminal, but here the <c>echo</c> command has been used in combination with output redirection into a file.</p>


    <p><term>Output redirection</term> is a feature in the shell that allows the user to redirect the output of a command using <c>></c> or <c>>></c>. Recall that the <c>echo</c> command normally prints to the screen. What we did above in creating new files with the <c>echo</c> command was to use output redirection to redirect the output of the command into a file of the specified name. So, the command <c>echo 'I love open source!' > newfile2.txt</c> redirected the output of the <c>echo</c> command into the <em>newfile2.txt</em> file. Both <c>></c> and <c>>></c> will create a <em>new</em> file with the provided name if one does not already exist. Note that the <c>></c> is the output redirection operator used for <em>overwriting</em> a file that might or might not already exist, while the <c>>></c> is an output operator that <em>appends</em> the output to an existing file or creates a new one if one does not already exist.  So, <c>></c> should be used judiciously!  
    </p>
  
    <p>
      Let's look at the contents of the files that we created. Let's use <c>cat</c> to see the file contents. Type the following one at a time:
    </p>
       <pre>
cat newfile1.txt
cat newfile2.txt
cat newfile3.txt
   </pre>
   <p>
    You might be wondering why we are using a command called <c>cat</c>. The <c>cat</c> command, which stands for <em>concatenate</em>, is used to concatenate standard input (typically the keyboard) or file(s) to the standard output.
    Like the name suggests, you can also use the <c>cat</c> command to concatenate files. For example, if you try:
   </p>
       <pre>
cat newfile2.txt newfile3.txt > newfile1.txt
cat newfile1.txt
   </pre>
<p>
  You should see that <em>newfile1.txt</em> instead of being empty, now contains the concatenation of <em>newfile2.txt</em> and <em>newfile3.txt</em> 
    </p>
<p>
  You can also use the <c>cat</c> command in combination with output redirection to create a multi-line file. Try typing the following lines to create a new multi-line file named <em>newfile_multi.txt</em>:
</p>
<pre>
cat > newfile_multi.txt
these
are
multiple
lines
</pre>

<p>
  You can complete this command sequence by pressing <c>Control+D</c> on your keyboard which will cause the new file to be closed. You should now have a new file called <em>newfile_multi.txt</em>.
</p> 

  <p>
    Analogous to output redirection, <term>input redirection</term> in the  shell using <c>&lt;</c> or <c>&lt;&lt;</c> allows you to redirect the input of a command. 
    <!-- Unlike the here document example, often you will redirect to use a file instead of the keyboard.  -->
    So, if we want the response from a command to be written to a file instead of to the terminal, we can use output redirection, but if we want the input to a command to come from a file instead of from the keyboard, we use input redirection. 
  </p>
    <p>
      Let's look at an example of input redirection using the  shell command <c>wc</c>, which stands for <em>word count</em>. This a command that as the name suggests can be used for counting. However, it does more than count words! It actually provides the line count, the word count, and the character count in the file(s) specified in the file arguments.
      By default, it displays all this in four-columnar output with the file name in the final column.
    </p> 

    <p>
   Let's try the following:
  </p>

<pre>
wc &lt; newfile2.txt
</pre>

<p>
The shell should reply with <c>1  4 20 newfile2.txt</c> because  <em>newfile2.txt</em> contains 'I love open source!' which is 1 line, 4 words, and 20 characters. If you only want to count the number of words, you could use the <c>-w</c> flag to display only the word count as follows:
</p>
<pre>
  wc -w  &lt; newfile2.txt
</pre>


<!-- 
<p>
  Another way to create a file in bash is with a strangely named command called the <term>here document</term>, which I suppose you can think of as creating a document in the current directory (here).  It has the form of <c><COMMAND < TERMINATOR/c>, where COMMAND can be any bash command and TERMINATOR is a string deliminator that indicates the end of an input list. Clearly, we need an example for this one.  Type the following into your shell:
 </p> 
<pre>
cat << _end_
this
is
a
list
_end_
</pre>
<p>
You should see the list of words echoed back to you on the screen. However, we can redirect the output into a file as follows:
</p>
<pre>
cat << _end_ > newfile_here.txt
this
is
a
list
_end_
</pre>

<p>
  Here documents are our first example of a kind of input redirection because we have redirected the command's input using the '<<' so the command takes a list that we create from the keyboard as its parameter.
</p>
   -->
<p>
  Let's practice with input and output redirection using a temporary file. Let's redirect the output of the <c>ls</c> command into a temporary file, and then use input redirection with <c>wc -w</c> to get the word count of this file. (This is one way to count the number of files in your current directory.) 
  
  Let's try the following:
</p>
<pre>
ls > temp.txt
wc -w &lt; temp.txt
</pre>


<p>
  If you  are wondering if there is a better way than using a temporary file, there is. 
  A <term>pipe (|)</term> in the shell allows you to redirect (aka to pipe) the output of one command into the input of another command. Let's see an example:
</p>

<pre>
  ls | wc -w
</pre>

<p>
   Try it! This is an improvement because it is faster and avoids the use of a temporary file.
</p>

</paragraphs>

<paragraphs>
  <title>Scripts</title>
  <p>
    
  </p>
<p>
  It is possible to use what we have learned thus far to make an executable script. A <term>script</term> is a text file that contains a sequence of commands for the operating system. Shell scripts can be useful to bring together common sets of tasks and to make repetitive tasks faster and easier.
</p>

<p>
  Let's try it! Typing <c>cat >> helloworld.sh</c> will tell the shell to open a new file named <c>helloworld.sh</c> and to expect multiple lines of input from the keyboard. Type the following lines:
</p>

<pre>
  cat >> helloworld.sh
  # This is a comment in a script typically used to explain the purpose
  echo 'Hello World!'
</pre>

<p>
  End the <c>cat >> helloworld.sh</c> command sequence by pressing <c>Ctrl+D</c> on your keyboard. This will cause the file named <c>helloworld.sh</c> to be completed and closed.
</p>

<p>
  You should now have new file named  <c>helloworld.sh</c>. However, we would like to make it executable so we can run it as a script. To make it executable, we use the <c>chmod</c> command. The <c>chmod</c> stands for <em>change file mode bits</em>.  To add execution, we will need the <c>+x</c> option, which stands for 'add execution' and will change it to being executable. So, run the following in your shell to make it an executable file for all users:
</p>

<pre>
  chmod +x helloworld.sh
</pre>

<p>
  To execute this script, you need to indicate the directory where to find it, which is the current directory. So, to run it, you can type the following:
</p>
<pre>
./helloworld.sh
</pre>

<p>
  We can create a more interactive script using the <c>read</c> command which reads text from the keyboard. It is frequently used to make scripts interactive. However, we need a variable to store the result. In the shell, some variables, like environment variables, always exist and you can always access them. 
  However, you can also create your own variables. As we have seen, you can use echo to ask the shell to provide the value of a variable, but you must precede the variable name with the dollar sign ($). Let's see how all this works by trying the following, finishing by pressing <c>Control+D</c>:
</p>

<pre>
  cat >> hellouser.sh
  # Says hello to the user by name.
  echo 'What is your first name?'
  # In the next line, USERNAME is dynamically created as a new variable
  read USERNAME
  echo "Hello " $USERNAME
</pre>

<p>
  To run this new script, you will again need to make it executable.  Then you can run it.
</p>

<pre>
  chmod +x hellouser.sh
  ./hellouser.sh
</pre>
</paragraphs>

<paragraphs>
  <title>File Management</title>
  <p>
  </p>

<p>
    We can  move files around, make copies of files, or remove (delete) files from the filesystem using <c>mv</c>, <c>cp</c>, and <c>rm</c> respectively. Let's see how these work. First, list your files. You should have  <em>newfile1.txt</em>, <em>newfile2.txt</em>, and <em>newfile3.txt</em> in your directory from the previous exercise.</p>
      <p>
        Let's make a new directory named <em>subdir</em> below our current directory and move one of our files there.
      </p>
       <pre>
mkdir subdir
mv newfile3.txt subdir/newfile3.txt
ls
ls subdir
   </pre>
   <p>
Note that the command <c>ls subdir</c> provides a listing of the subdirectory named <em>subdir</em>. You should see that newfile3.txt is now not in the current directory, but it is instead in the subdirectory <em>subdir</em>.
</p>
  <p>
    In addition to moving files around in the directory structure, we can also use the <c>mv</c> command to rename files as follows:
  </p>
    <pre>
mv newfile1.txt newfile4.txt
ls 
   </pre>
   <p>
   One important thing to watch out for with the <c>mv</c> command is that if the destination filename already exists, it might get overwritten. For this reason, you might want to use the <c>-i</c> flag which stands for interactive. Try it.
   </p>
    <pre>
mv -i newfile1.txt newfile2.txt
</pre>
<p>
You should see a question like, "overwrite 'newfile2.txt'?"If you respond with "n", then the file will not be overwritten.
  </p>
<p>
The <c>cp</c> command works as you might expect:
</p>
    <pre>
cp newfile2.txt newfile2_cp.txt
cat newfile2_cp.txt
   </pre>
   <p>
Just like with the <c>mv</c> command, the <c>cp</c> command will overwrite the destination file if it already exists. For this reason, you might want to use the <c>-i</c> flag which stands for interactive here too. Try it.
   </p>
    <pre>
cp -i newfile4.txt newfile2_cp.txt
</pre>
<p>
You should see a question like, "overwrite 'newfile2_cp.txt'?" If you respond with "n", the command will not be overwritten, so using the <c>-i</c> flag seems a wise safeguard.
</p>
<p>
  The <c>rm</c> command is a useful, but another dangerous command.  Let's try it:
</p>
<pre>
rm newfile2_cp.txt
</pre>
<p>
Just as with <c>cp</c>, and <c>mv</c>, you are probably wise to use the <c>-i</c> option. 
</p>
<pre>
rm -i newfile4.txt
</pre>
<p>
And, if you respond with "n", then the removal will not happen. 
</p>
  </paragraphs>
<paragraphs>
  <title>A few time-saving shell commands</title>
  <p>
    
  </p>
  <p>
    The <em>up arrow</em> key retrieves the previous shell command. If you press it multiple times, it will take you back through multiple commands in your shell history. This is a useful way to repeat a command. For example, if you had a typo, you can use the up arrow, edit the command, and push enter to fix the command. Analogously, the <em>down arrow</em> will move you in the reverse direction through the shell command history. For more useful shell commands, type <c>man bash</c> for hints on how to search your shell history, re-execute commands, and much more.
    </p>
  <p>
    This paragraph is intended to alert you to some useful search features. A couple examples of very common search patterns are using wildcards for zero or more characters or for a single character.  The asterisk (*) specifies zero or more characters to match. In bash the question mark (?) is used for matching exactly one single character.
    </p>
      <p>
        For example, if we type the following:
      </p>
        <pre>
rm -i newfile?.txt
</pre>
<p>
Then the question mark will match with any single character, and we will see the following prompts:
</p>
<pre>
rm: remove regular file 'newfile2.txt'?
rm: remove regular file 'newfile4.txt'?
</pre>
<p>
If we instead type:
</p>
<pre>
rm -i newfile*.txt
</pre> 
<p>
    Then the asterisk will match with any number of characters (including zero), and we will see the following prompts:
</p>
<pre>
rm: remove regular file 'newfile2.txt'?
rm: remove regular file 'newfile4.txt'?
rm: remove regular file 'newfile2_cp.txt'?
</pre>
<p>
As you can see, these search patterns give you a lot of power and control. 
  </p>

  
  </paragraphs>

</subsection>

<conclusion>
<title>Conclusion</title>
  <p>
    Hopefully, you now feel a bit more comfortable using the shell. The shell commands discussed above are summarized in Appendix <xref ref="ap_shell_cheat_sheet"/>.
  </p>
</conclusion>

  <exercise label = "basicShellCommands" numbered = "yes" language = "natural" adaptive="yes">
    <statement>
        <p>
          You have a file named <term>data.txt</term> that contains the following lines:
        </p>
        <pre>apple
orange
banana
grape
        </pre>
        <p>
          Your task is to create a new file named <term>fruits.txt</term> and copy the contents of <term>data.txt</term> to <term>fruits.txt</term>. Next, append the word <c>kiwi</c> to <term>fruits.txt</term>. Then, display the contents of <term>fruits.txt</term> in the terminal. Next, count the number of fruits in <term>fruits.txt</term> and display the total count. Finally, overwrite the content of <term>data.txt</term> with the content of <term>fruits.txt</term> and rename <term>data.txt</term> to a new file named <c>fruits2</c>.
        </p>
        <p>
          Here are some commands you may need to perform the task. Rearrange the correct commands in the correct order by dragging and dropping.
        </p>
    </statement>
    <blocks>
        <block order="1">
          <choice correct = "yes">
            <p>
              <c>cat data.txt &gt; fruits.txt</c>
            </p>
        </choice>
        <choice>
            <p>
              <c>cat data.txt &gt;&gt; fruits.txt</c>
            </p>
        </choice>
        </block>
        <block order="2">
            <p>
              <c>echo "kiwi" &gt;&gt; fruits.txt</c>
            </p>
        </block>
        <block order="3">
            <p>
              <c>cat fruits.txt</c>
            </p>
        </block>
        <block order ="4">
          <choice>
            <p>
              <c>wc -l &lt; fruits.txt</c>
            </p>
        </choice>
        <choice correct = "yes">
            <p>
              <c>wc -w &lt; fruits.txt</c>
            </p>
        </choice>
        </block>
        <block order="5">
          <p>
            <c>cp -i fruits.txt data.txt </c>
          </p>
        </block>
        <block order="6">
          <p>
            <c>mv data.txt fruits2.txt</c>
          </p>
        </block>
        <block correct="no">
            <p>
              <c>rm data.txt fruits2.txt</c>
            </p>
        </block>
    </blocks>
  </exercise>
</section>

