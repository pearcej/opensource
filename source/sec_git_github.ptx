<?xml version="1.0" encoding="UTF-8"?>

	<section xml:id="sec_git_github">
		<title>GitHub - Git in the Cloud</title>

		<introduction>
<!-- div attr=-->
		<p> The most popular SECPs include <url href="https://github.com/" visual="github.com/">GitHub</url>, 
            <url href="https://gitea.io/" visual="gitea.io">Gitea</url>, 
            <url href="https://gitlab.com/" visual="gitlab.com/">GitLab</url>, and 
            <url href="https://bitbucket.org/" visual="bitbucket.org">Bitbucket</url>. All of these use Git for version control and all provide cloud storage space for Git repositories. Of these, GitHub is the single largest host for Git repositories and is the central point of collaboration for millions of developers and projects. A large percentage of all Git repositories are hosted on GitHub, and many open-source projects use it for Git hosting, issue tracking, code review, and other things. So while it’s not a direct part of the Git open source project, there’s a good chance that you’ll want or need to interact with GitHub at some point while using Git professionally. Other hosting services work similarly.
		</p>
		<p>
			Watch the following video from GitHub to learn more.
		</p>
		<figure xml:id="video-what-is-github">
			<caption>What is GitHub?</caption>
			<video youtube="pBy1zgt0XPc" width="80%" />
		</figure>

			<p>
				Obviously, the first thing you need to do is set up a free user account. If you do not already have one, simply visit <url href="https://github.com" visual="github.com">https://github.com</url> and follow the directions.
			</p><!--</div attr= class="paragraph">-->
		</introduction>

<!-- TODO -->
		<subsection xml:id="_contributing_to_a_project">
			<title>Contributing to a Project</title>

<!-- div attr= class="paragraph"-->
			<p>
				Next, let’s walk through some details that could be useful in helping you contribute to an existing open source project.
			</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="sect3"-->

			<paragraphs xml:id="_forking_projects">
				<title>Forking Projects</title>

<!-- div attr= class="paragraph"-->
				<p>
					If you want to contribute to an existing project to which you don’t have write access (aka push access), you can <term>fork</term> the project. When you “fork” a project, GitHub will make a copy of the project that is entirely yours; it lives in your namespace, and you can push to it.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="admonitionblock note"-->
				<p>
					In GitHub, a “fork” is simply a copy of the project in your own namespace, allowing you to make changes to a project publicly as a way to contribute in an open manner. Note: Historically, the term “fork” has sometimes had a negative connotation if it meant that someone took an open source project in a different direction, creating a competing project and splitting the contributors. 
				</p>

<!-- div attr= class="paragraph"-->
				<p>
					This way, projects don’t have to worry about adding users as collaborators to give them push access. People can fork a project, push to it, and contribute their changes back to the original repository by creating a merge request which in GitHub is called a <term>pull request</term>. We’ll cover this next. Making a pull request opens up a discussion thread with code review, and the owner and the contributor can then communicate about the change until the owner is happy with it, at which point the owner can merge it in.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
				<p>
					To fork a project, visit the project page and click the “Fork” button at the top-right of the page. This gives you a copy of the project in the GitHub cloud.
				</p><!--</div attr= class="paragraph">-->

				<p>
					Once you have your own fork on GitHub, you need to <term>clone</term> a local copy down to a place where you can edit it, most typically your own local computer. <em>Note that while you can make small changes in GitHub, it is not a good practice to do so.</em>
				</p><!--</div attr= class="paragraph">-->
				<p>
					Let's try this!
				</p>
				<exercise xml:id="exercise-github-forking">
					<title><term>Exercise – Fork a Repo</term></title>
			
					<p>
						Go to <url href="https://docs.github.com/en/get-started/quickstart/fork-a-repo">GitHub: Fork a Repo</url> and complete the provided exercise with the octocat/Spoon-Knife repository.
					</p>
				  </exercise>
<!-- div attr= class="sect3"-->
			</paragraphs>

			<paragraphs xml:id="ch06-github_flow">
				<title>The GitHub Flow</title>

<!-- div attr= class="paragraph"-->
				<p>
					GitHub is designed around a particular collaboration workflow, centered on pull requests and idea of a branches as covered in <xref ref="sec_git_branching" />.. This flow works whether you’re collaborating with a tightly-knit team in a single shared repository, or a globally-distributed company or network of strangers contributing to a project through dozens of forks. 
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
				<p>
					After you read the project's README contributor's page and get a sense of the community norms, here’s how the Git workflow generally works:
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="olist arabic"-->
				<p><ol>
					<li>
					<p>
					Fork the project.
					</p>
					</li>

					<li>
									<p>
					Create your own topic branch from <c>main</c> (or <c>master</c> or another branch name, depending upon the project).
				</p>
					</li>

					<li>
									<p>
					Make some commits to improve the project, being sure to follow community expectations, such as linking the issue that you are fixing.
				</p>
					</li>

					<li>
									<p>
					Push this branch to your GitHub fork.
				</p>
					</li>

					<li>
									<p>
					Open a Pull Request on GitHub.
				</p>
					</li>

					<li>
									<p>
					Discuss, and optionally continue committing.
				</p>
					</li>

					<li>
									<p>
					Hopefully, the project owner eventually merges or closes the Pull Request.
				</p>
					</li>

					<li>
									<p>
					Sync the updated main (or master) back to your fork.
				</p>
					</li>

				</ol></p><!--</div attr= class="olist arabic">-->

<!-- div attr= class="paragraph"-->
				<p>
					Let’s walk through an example of proposing a change to an open source project hosted on GitHub using this flow.
				</p><!--</div attr= class="paragraph">-->

				<exercise xml:id="exercise-github-flow">
					<title><term>Exercise – GitHub Flow</term></title>
			
					<p>
						Go to <url href="https://docs.github.com/en/get-started/quickstart/github-flow">GitHub Flow</url> and complete the provided exercise with one of your own repositories. 
					</p>
				</exercise>


				<paragraphs xml:id="_creating_a_pull_request">
					<title>Creating a Pull Request</title>

					<p>
						You can always go to the “Branches” page at <c>https://github.com/&lt;user&gt;/&lt;project&gt;/branches</c> to locate your branch and open a new Pull Request from there.
					</p><!--</div attr= class="paragraph">-->


<!-- div attr= class="paragraph"-->
					<p>
						You can also see a list of the commits in our topic branch that are “ahead” of the <c>main</c> or  <c>master</c> branch (in this case, just the one) and a unified diff of all the changes that will be made should this branch get merged by the project owner.
					</p><!--</div attr= class="paragraph">-->


<!-- div attr= class="paragraph"-->
					<p>
						When you hit the 'Create pull request' button on this screen, the owner of the project you forked will get a notification that someone is suggesting a change and will link to a page that has all of this information on it.
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="admonitionblock note"-->

					<p>
						Note: Though Pull Requests are used commonly for public projects when the contributor has a complete change ready to be made, it’s also often used in internal projects <em>at the beginning</em> of the development cycle. Since you can keep pushing to the topic branch even <term>after</term> the Pull Request is opened, it’s often opened early and used as a way to iterate on work as a team within a context, rather than opened at the very end of the process.
					</p>

					<p>
						Let's give this a try!
					</p>

					<exercise xml:id="ex-intro-github">
						<title>Introduction to GitHub</title>
						Go to <url href="https://github.com/skills/introduction-to-github" visual="github.com/skills/introduction-to-github">Introduction to GitHub</url> and try all parts of the exercise. It should take an hour or less.
					</exercise>

<!-- div attr= class="sect4"-->
				</paragraphs>

				<paragraphs xml:id="_iterating_on_a_pull_request">
					<title>Iterating on a Pull Request</title>

<!-- div attr= class="paragraph"-->
					<p>
						At this point, the project owner can look at the suggested change and merge it, reject it or comment on it. Let’s say that he likes the idea, but would prefer a slightly longer time for the light to be off than on.
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
					<p>
						Where this conversation may take place varies by community, on GitHub this typically happens online. The project owner can review the unified diff and leave a comment by clicking on any of the lines.
					</p><!--</div attr= class="paragraph">-->


<!-- div attr= class="paragraph"-->
					<p>
						Once the maintainer makes a comment, the person who opened the Pull Request (and indeed, anyone else watching the repository) will get a notification. 
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="title"-->
<!--</div attr= class="title">--><!--</div attr= xml:id="_email_notification" class="imageblock">-->

<!-- div attr= class="paragraph"-->
					<p>
						Note that anyone can also leave general comments on the Pull Request. 
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
					<p>
						Now the contributor can see what they need to do in order to get their change accepted. Luckily this is very straightforward. With GitHub you simply commit to the same topic branch again and push, which will automatically update the Pull Request. 
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
					<p>
						Adding commits to an existing Pull Request doesn’t trigger a notification, so once you push corrections you might want to to leave a comment to inform the project owner that you made the requested change.
					</p><!--</div attr= class="paragraph">-->



<!-- div attr= class="paragraph"-->
					<p>
						An interesting thing to notice is that if you click on the “Files Changed” tab on any Pull Request, you’ll get a “unified” diff — that is, the total aggregate difference that would be introduced the main branch if this topic branch was merged in. In <c>git diff</c> terms, it basically automatically shows you <c>git diff main&lt;branch&gt;</c> for the branch this Pull Request is based on. 
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
					<p>
						GitHub always checks to see if the Pull Request merges cleanly and provides a button to do the merge for you on the server. This button only shows up if you have write access to the repository and a trivial merge is possible. If you click it GitHub will perform a “non-fast-forward” merge, meaning that even if the merge <term>could</term> be a fast-forward, it will still create a merge commit.
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
					<p>
						If you  prefer, you can simply pull the branch down and merge it locally. If you merge this branch into the <c>main</c> branch and push it to GitHub, the Pull Request will automatically be closed.
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
					<p>
						This is the basic workflow that most GitHub projects use. Topic branches are created, Pull Requests are opened on them, a discussion ensues, possibly more work is done on the branch and eventually the request is either closed or merged.
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="admonitionblock note"-->
					<p>
						Note: It’s important to note that you can also open a Pull Request between two branches in the same repository. If you’re working on a feature with someone and you both have write access to the project, you can push a topic branch to the repository and open a Pull Request on it to the <c>main</c> branch of that same project to initiate the code review and discussion process. No forking necessary.
					</p>
	
<!-- div attr= class="sect3"-->
				</paragraphs>
			</paragraphs>

			<paragraphs xml:id="_advanced_pull_requests">
				<title>Advanced Pull Requests</title>

<!-- div attr= class="paragraph"-->
				<p>
					Now that we’ve covered the basics of contributing to a project on GitHub, let’s cover a few interesting tips and tricks about Pull Requests so you can be more effective in using them.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="sect4"-->

				<paragraphs xml:id="_pull_requests_as_patches">
					<title>Pull Requests as Patches</title>

<!-- div attr= class="paragraph"-->
					<p>
						It’s important to understand that many projects don’t really think of Pull Requests as queues of perfect patches that should apply cleanly in order, as most mailing list-based projects think of patch series contributions. Most GitHub projects think about Pull Request branches as iterative conversations around a proposed change, culminating in a unified diff that is applied by merging.
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
					<p>
						This is an important distinction, because generally the change is suggested before the code is thought to be perfect. This depends wholely on the community. In communities where it is used, it enables an earlier conversation with the maintainers so that arriving at the proper solution is more of a community effort. When code is proposed with a Pull Request and the maintainers or community suggest a change, the patch series is generally not re-rolled, but instead the difference is pushed as a new commit to the branch, moving the conversation forward with the context of the previous work intact.
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
					<p>
						This way if you go back and look at this Pull Request in the future, you can easily find all of the context of why decisions were made. Pushing the “Merge” button on the site purposefully creates a merge commit that references the Pull Request so that it’s easy to go back and research the original conversation if necessary.
					</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect4">-->

<!-- div attr= class="sect4"-->
				</paragraphs>

				<paragraphs xml:id="_keeping_up_with_upstream">
					<title>Keeping up with Upstream</title>

<!-- div attr= class="paragraph"-->
					<p>
						If your Pull Request becomes out of date or otherwise doesn’t merge cleanly, you will want to fix it so the maintainer can easily merge it. GitHub will test this for you and let you know at the bottom of every Pull Request if the merge is trivial or not.
					</p><!--</div attr= class="paragraph">-->



<!-- div attr= class="paragraph"-->
					<p>
						If your Pull Request does not merge cleanly you’ll want to fix your branch so that it turns green.
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
					<p>
						You have two main options in order to do this. You can either rebase your branch on top of whatever the target branch is (normally the <c>main</c> branch of the repository you forked), or you can merge the target branch into your branch.
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
					<p>
						Most developers on GitHub will choose to do the latter, for the same reasons we just went over in the previous section. What matters is the history and the final merge, so rebasing isn’t getting you much other than a slightly cleaner history and in return is <term>far</term> more difficult and error prone.
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
					<p>
						If you want to merge in the target branch to make your Pull Request mergeable, you would add the original repository as a new remote, fetch from it, merge the main branch of that repository into your topic branch, fix any issues and finally push it back up to the same branch you opened the Pull Request on.
					</p><!--</div attr= class="paragraph">-->




<!-- div attr= class="colist arabic"-->
					<p><ol>
						<li>
											<p>
						Add the original repository as a remote named <c>upstream</c>.
					</p>
						</li>

						<li>
											<p>
						Fetch the newest work from that remote.
					</p>
						</li>

						<li>
											<p>
						Merge the main branch of that repository into your topic branch.
					</p>
						</li>

						<li>
											<p>
						Fix the conflict that occurred.
					</p>
						</li>

						<li>
											<p>
						Push back up to the same topic branch.
					</p>
						</li>

					</ol></p><!--</div attr= class="colist arabic">-->

<!-- div attr= class="paragraph"-->
					<p>
						Once you do that, the Pull Request will be automatically updated and re-checked to see if it merges cleanly.
					</p><!--</div attr= class="paragraph">-->



<!-- div attr= class="paragraph"-->
					<p>
						One of the great things about Git is that you can do that continuously. If you have a very long-running project, you can easily merge from the target branch over and over again and only have to deal with conflicts that have arisen since the last time that you merged, making the process very manageable.
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
					<p>
						If you absolutely wish to rebase the branch to clean it up, you can certainly do so, but it is highly encouraged to not force push over the branch that the Pull Request is already opened on. If other people have pulled it down and done more work on it, you will run into major problems! Instead, push the rebased branch to a new branch on GitHub and open a brand new Pull Request referencing the old one, then close the original.
					</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect4">-->

<!-- div attr= class="sect4"-->
				</paragraphs>

				<paragraphs xml:id="_references">
					<title>References</title>

<!-- div attr= class="paragraph"-->
					<p>
						Your next question may be “How do I reference the old Pull Request?”. It turns out there are many, many ways to reference other things almost anywhere you can write in GitHub.
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
					<p>
						Let’s start with how to cross-reference another Pull Request or an Issue. All Pull Requests and Issues are assigned numbers and they are unique within the project. For example, you can’t have Pull Request #3 <em>and</em> Issue #3. If you want to reference any Pull Request or Issue from any other one, you can simply put <c>#&lt;num&gt;</c> in any comment or description. You can also be more specific if the Issue or Pull request lives somewhere else; write <c>username#&lt;num&gt;</c> if you’re referring to an Issue or Pull Request in a fork of the repository you’re in, or <c>username/repo#&lt;num&gt;</c> to reference something in another repository.
					</p><!--</div attr= class="paragraph">-->


<!-- div attr= class="paragraph"-->
					<p>
						In addition to issue numbers, you can also reference a specific commit by SHA-1. You have to specify a full 40 character SHA-1, but if GitHub sees that in a comment, it will link directly to the commit. Again, you can reference commits in forks or other repositories in the same way you did with issues.
					</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect4">--><!--</div attr= class="sect3">-->

<!-- div attr= class="sect3"-->
				</paragraphs>
			</paragraphs>

			<paragraphs xml:id="_github_flavored_markdown">
				<title>GitHub Flavored Markdown</title>

<!-- div attr= class="paragraph"-->
				<p>
					Linking to other Issues is just the beginning of interesting things you can do with almost any text box on GitHub. In Issue and Pull Request descriptions, comments, code comments and more, you can use what is called “GitHub Flavored Markdown”. Markdown is like writing in plain text but which is rendered richly.
				</p><!--</div attr= class="paragraph">-->


<!-- div attr= class="paragraph"-->
				<p>
					The GitHub flavor of Markdown adds more things you can do beyond the basic Markdown syntax. These can all be really useful when creating useful Pull Request or Issue comments or descriptions.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="sect4"-->

				<paragraphs xml:id="_task_lists">
					<title>Task Lists</title>

<!-- div attr= class="paragraph"-->
					<p>
						A useful GitHub specific Markdown feature, especially for use in Pull Requests, is the <url href="https://docs.github.com/en/issues/tracking-your-work-with-issues/about-tasklists">Task List</url>. A <term>task list</term> is a list of checkboxes of things you want to get done. Putting them into an Issue or Pull Request normally indicates things that you want to get done before you consider the item complete.
					</p><!--</div attr= class="paragraph">-->


<!-- div attr= class="paragraph"-->
					<p>
						These are often used in Pull Requests to indicate what all you would like to get done on the branch before the Pull Request will be ready to merge. The really cool part is that you can simply click the checkboxes to update the comment — you don’t have to edit the Markdown directly to check tasks off.
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
					<p>
						What’s more, GitHub will look for task lists in your Issues and Pull Requests and show them as metadata on the pages that list them out. For example, if you have a Pull Request with tasks and you look at the overview page of all Pull Requests, you can see how far done it is. This helps people break down Pull Requests into subtasks and helps other people track the progress of the branch. 
					</p><!--</div attr= class="paragraph">-->


<!-- div attr= class="paragraph"-->
					<p>
						These are incredibly useful when you open a Pull Request early and use it to track your progress through the implementation of the feature.
					</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect4">-->

<!-- div attr= class="sect4"-->
				</paragraphs>

				<paragraphs xml:id="_code_snippets">
					<title>Code Snippets</title>

<!-- div attr= class="paragraph"-->
					<p>
						You can also add code snippets to comments. This is especially useful if you want to present something that you <em>could</em> try to do before actually implementing it as a commit on your branch. This is also often used to add example code of what is not working or what this Pull Request could implement.
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
					<p>
						To add a snippet of code you have to “fence” it in backticks.
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="listingblock"-->
<!-- div attr= class="content"-->
					<pre>```java
for(int i=0 ; i &lt; 5 ; i++)
{
   System.out.println("i is : " + i);
}
```</pre><!--</div attr= class="content">--><!--</div attr= class="listingblock">-->

<!-- div attr= class="paragraph"-->
					<p>
						If you add a language name like we did there with 'java', GitHub will also try to syntax highlight the snippet.
					</p><!--</div attr= class="paragraph">-->


<!-- div attr= class="sect4"-->
				</paragraphs>

				<paragraphs xml:id="_quoting">
					<title>Quoting</title>

<!-- div attr= class="paragraph"-->
					<p>
						If you’re responding to a small part of a long comment, you can selectively quote out of the other comment by preceding the lines with the <c>&gt;</c> character. In fact, this is so common and so useful that there is a keyboard shortcut for it. If you highlight text in a comment that you want to directly reply to and hit the <c>r</c> key, it will quote that text in the comment box for you.
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
					<p>
						The quotes look something like this:
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="listingblock"-->
<!-- div attr= class="content"-->
					<pre>&gt; Whether 'tis Nobler in the mind to suffer
&gt; The Slings and Arrows of outrageous Fortune,

How big are these slings and in particular, these arrows?</pre><!--</div attr= class="content">--><!--</div attr= class="listingblock">-->


<!-- div attr= class="sect4"-->
				</paragraphs>

			</paragraphs>

			<paragraphs xml:id="_fetch_and_push_on_different_repositories">
				<title>Keep your GitHub public repository up-to-date</title>

<!-- div attr= class="paragraph"-->
				<p>
					Once you’ve forked a GitHub repository, your repository (your "fork") exists independently from the original. In particular, when the original repository has new commits, GitHub informs you by a message like:
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="listingblock"-->
<!-- div attr= class="content"-->
				<pre>This branch is 5 commits behind progit:main.</pre><!--</div attr= class="content">--><!--</div attr= class="listingblock">-->

<!-- div attr= class="paragraph"-->
				<p>
					But your GitHub repository will never be automatically updated by GitHub; this is something that you must do yourself. Fortunately, this is very easy to do.
				</p><!--</div attr= class="paragraph">-->



			</paragraphs>

		</subsection>

<!-- TODO -->

		<subsection xml:id="_maintaining_gh_project">
			<title>Maintaining a Project</title>

<!-- div attr= class="paragraph"-->
			<p>
				Now that we’re comfortable contributing to a project, let’s look at the other side: creating, maintaining and administering your own project.
			</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="sect3"-->

			<paragraphs xml:id="_creating_a_new_repository">
				<title>Creating a New Repository</title>

<!-- div attr= class="paragraph"-->
				<p>
					Let’s create a new repository to share our project code with. Start by clicking the “New repository” button on the right-hand side of the dashboard, or from the <c>+</c> button in the top toolbar next to your username.
				</p>



<!-- div attr= class="paragraph"-->
				<p>
					All you really have to do here is provide a project name; the rest of the fields are completely optional. For now, just click the “Create Repository” button, and boom – you have a new repository on GitHub, named <c>&lt;user&gt;/&lt;project_name&gt;</c>.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
				<p>
					Since you have no code there yet, GitHub will show you instructions for how to create a brand-new Git repository, or connect an existing Git project. 
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
				<p>
					Now that your project is hosted on GitHub, you can give the URL to anyone you want to share your project with. Every project on GitHub is accessible over HTTPS as <c>https://github.com/&lt;user&gt;/&lt;project_name&gt;</c>, and over SSH as <c>git@github.com:&lt;user&gt;/&lt;project_name&gt;</c>. Git can fetch from and push to both of these URLs, but they are access-controlled based on the credentials of the user connecting to them.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="admonitionblock note"-->

				<p>
					Note: It is often preferable to share the HTTPS based URL for a public project, since the user does not have to have a GitHub account to access it for cloning. Users will have to have an account and an uploaded SSH key to access your project if you give them the SSH URL. The HTTPS one is also exactly the same URL they would paste into a browser to view the project there.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="sect3"-->
			</paragraphs>

			<paragraphs xml:id="_adding_collaborators">
				<title>Adding Collaborators</title>

<!-- div attr= class="paragraph"-->
				<p>
					If you’re working with other people who you want to give commit access to, you need to add them as “collaborators”. If Ben, Jeff, and Louise all sign up for accounts on GitHub, and you want to give them push access to your repository, you can add them to your project. Doing so will give them “push” access, which means they have both read and write access to the project and Git repository.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
				<p>
					Click the “Settings” link at the bottom of the right-hand sidebar.
				</p><!--</div attr= class="paragraph">-->


                <p>
					Then select “Collaborators” from the menu on the left-hand side. Then, just type a username into the box, and click “Add collaborator.” You can repeat this as many times as you like to grant access to everyone you like. If you need to revoke access, just click the “X” on the right-hand side of their row.
				</p><!--</div attr= class="paragraph">-->
      


<!-- div attr= class="sect3"-->
			</paragraphs>

			<paragraphs xml:id="_managing_pull_requests">
				<title>Managing Pull Requests</title>

<!-- div attr= class="paragraph"-->
				<p>
					Now that you have a project with some code in it and maybe even a few collaborators who also have push access, let’s go over what to do when you get a Pull Request yourself.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
				<p>
					Pull Requests can either come from a branch in a fork of your repository or they can come from another branch in the same repository. The only difference is that the ones in a fork are often from people where you can’t push to their branch and they can’t push to yours, whereas with internal Pull Requests generally both parties can access the branch.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="sect4"-->

				<paragraphs xml:id="_email_notifications">
					<title>Email Notifications</title>

<!-- div attr= class="paragraph"-->
					<p>
						Someone comes along and makes a change to your code and sends you a Pull Request. You should get an email notifying you about the new Pull Request.
					</p><!--</div attr= class="paragraph">-->


<!-- div attr= class="paragraph"-->
					<p>
						There are a few things to notice about this email. It will give you a small diffstat — a list of files that have changed in the Pull Request and by how much. It gives you a link to the Pull Request on GitHub. It also gives you a few URLs that you can use from the command line.
					</p>

				</paragraphs>

				<paragraphs xml:id="_collaborating_on_the_pull_request">
					<title>Collaborating on the Pull Request</title>

<!-- div attr= class="paragraph"-->
					<p>
						As we covered above, you can now have a conversation with the person who opened the Pull Request. You can comment on specific lines of code, comment on whole commits or comment on the entire Pull Request itself, using GitHub Flavored Markdown everywhere.
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
					<p>
						Every time someone else comments on the Pull Request you will continue to get email notifications so you know there is activity happening. They will each have a link to the Pull Request where the activity is happening and you can also directly respond to the email to comment on the Pull Request thread.
					</p><!--</div attr= class="paragraph">-->


					<p>
						Once the code is in a place you like and want to merge it in, you can either pull the code down and merge it locally, either with the <c>git pull &lt;url&gt; &lt;branch&gt;</c> syntax we saw earlier, or by adding the fork as a remote and fetching and merging.
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
					<p>
						If the merge is trivial, you can also just hit the “Merge” button on the GitHub site. This will do a “non-fast-forward” merge, creating a merge commit even if a fast-forward merge was possible. This means that no matter what, every time you hit the merge button, a merge commit is created. 
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
					<p>
						If you decide you don’t want to merge it, you can also just close the Pull Request and the person who opened it will be notified.
					</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect4">-->

<!-- div attr= class="sect4"-->
				</paragraphs>


				<paragraphs xml:id="_pull_requests_on_pull_requests">
					<title>Pull Requests on Pull Requests</title>

<!-- div attr= class="paragraph"-->
					<p>
						Not only can you open Pull Requests that target the main or <c>main</c> branch, you can actually open a Pull Request targeting any branch in the network. In fact, you can even target another Pull Request.
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
					<p>
						If you see a Pull Request that is moving in the right direction and you have an idea for a change that depends on it or you’re not sure is a good idea, or you just don’t have push access to the target branch, you can open a Pull Request directly to it.
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
					<p>
						When you go to open a Pull Request, there is a box at the top of the page that specifies which branch you’re requesting to pull to and which you’re requesting to pull from. If you hit the “Edit” button at the right of that box you can change not only the branches but also which fork.
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="sect3"-->
				</paragraphs>
			</paragraphs>

			<paragraphs xml:id="_mentions_and_notifications">
				<title>Mentions and Notifications</title>

<!-- div attr= class="paragraph"-->
				<p>
					GitHub also has a pretty nice notifications system built in that can come in handy when you have questions or need feedback from specific individuals or teams.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
				<p>
					In any comment you can start typing a <c>@</c> character and it will begin to autocomplete with the names and usernames of people who are collaborators or contributors in the project.
					<notation>
						<usage><m>@</m></usage>
						<description>at symbol - used to tag a username</description>
					</notation>
					
				</p><!--</div attr= class="paragraph">-->


<!-- div attr= class="paragraph"-->
				<p>
					You can also mention a user who is not in that dropdown, but often the autocompleter can make it faster.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
				<p>
					Once you post a comment with a user mention, that user will be notified. This means that this can be a really effective way of pulling people into conversations rather than making them poll. Very often in Pull Requests on GitHub people will pull in other people on their teams or in their company to review an Issue or Pull Request.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
				<p>
					If someone gets mentioned on a Pull Request or Issue, they will be “subscribed” to it and will continue getting notifications any time some activity occurs on it. You will also be subscribed to something if you opened it, if you’re watching the repository or if you comment on something. If you no longer wish to receive notifications, there is an “Unsubscribe” button on the page you can click to stop receiving updates on it.
				</p><!--</div attr= class="paragraph">-->
				</paragraphs>


				<paragraphs xml:id="_the_notifications_page">
					<title>The Notifications Page</title>

<!-- div attr= class="paragraph"-->
					<p>
						When we mention “notifications” here with respect to GitHub, we mean a specific way that GitHub tries to get in touch with you when events happen and there are a few different ways you can configure them. If you go to the “Notification center” tab from the settings page, you can see some of the options you have.
					</p><!--</div attr= class="paragraph">-->



<!-- div attr= class="paragraph"-->
					<p>
						The two choices are to get notifications over “Email” and over “Web” and you can choose either, neither or both for when you actively participate in things and for activity on repositories you are watching.
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="sect5"-->

					<paragraphs xml:id="_web_notifications">
						<title>Web Notifications</title>

<!-- div attr= class="paragraph"-->
						<p>
							Web notifications only exist on GitHub and you can only check them on GitHub. If you have this option selected in your preferences and a notification is triggered for you, you will see a small blue dot over your notifications icon at the top of your screen.
						</p><!--</div attr= class="paragraph">-->


<!-- div attr= class="paragraph"-->
						<p>
							If you click on that, you will see a list of all the items you have been notified about, grouped by project. You can filter to the notifications of a specific project by clicking on its name in the left hand sidebar. You can also acknowledge the notification by clicking the checkmark icon next to any notification, or acknowledge <em>all</em> of the notifications in a project by clicking the checkmark at the top of the group. There is also a mute button next to each checkmark that you can click to not receive any further notifications on that item.
						</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
						<p>
							All of these tools are very useful for handling large numbers of notifications. Many GitHub power users will simply turn off email notifications entirely and manage all of their notifications through this screen.
						</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect5">-->

<!-- div attr= class="sect5"-->

						<paragraphs xml:id="_email_notifications_2">
							<title>Email Notifications</title>

<!-- div attr= class="paragraph"-->
							<p>
								Email notifications are the other way you can handle notifications through GitHub. If you have this turned on you will get emails for each notification. The emails will also be threaded properly, which is nice if you’re using a threading email client.
							</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
							<p>
								There is also a fair amount of metadata embedded in the headers of the emails that GitHub sends you, which can be really helpful for setting up custom filters and rules.
							</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->

			<p>
								There are a couple of interesting things here. If you want to highlight or re-route emails to this particular project or even Pull Request, the information in <c>Message-ID</c> gives you all the data in <c>&lt;user&gt;/&lt;project&gt;/&lt;type&gt;/&lt;id&gt;</c> format. If this were an issue, for example, the <c>&lt;type&gt;</c> field would have been “issues” rather than “pull”.
							</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
							<p>
								The <c>List-Post</c> and <c>List-Unsubscribe</c> fields mean that if you have a mail client that understands those, you can easily post to the list or “Unsubscribe” from the thread. That would be essentially the same as clicking the “mute” button on the web version of the notification or “Unsubscribe” on the Issue or Pull Request page itself.
							</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
							<p>
								It’s also worth noting that if you have both email and web notifications enabled and you read the email version of the notification, the web version will be marked as read as well if you have images allowed in your mail client.
							</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect5">--><!--</div attr= class="sect4">--><!--</div attr= class="sect3">-->

<!-- div attr= class="sect3"-->
						</paragraphs>
					</paragraphs>
				</paragraphs>
			
			<paragraphs xml:id="_special_files">
				<title>Special Files</title>

<!-- div attr= class="paragraph"-->
				<p>
					There are a number of special files that GitHub will notice if they are present in your repository.
					We detail a few of the most common ones. Note that these can typically be written in any format that GitHub recognizes as prose.
				</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect3">-->

<!-- div attr= class="sect3"-->
			</paragraphs>
			<paragraphs xml:id="_license">
				<title>LICENSE</title>
			<p>
			The first is the <c>LICENSE</c> file, which can be of nearly any prose format. For example, it could be LICENSE, LICENSE.md, LICENSE.asciidoc, etc. 
			</p>
			<p>
			The license file explains the respostory's legal license, including any legal rights, any copyright restrictions, etc. When you include a detectable license in your repository, people who visit your repository will see it at the top of the repository page.
			</p>
			<p>
				For more information on how to add a license, see <url href="https://help.github.com/articles/adding-a-license-to-a-repository/" visual="help.github.com/articles/adding-a-license-to-a-repository/">Adding a license to a repository</url> 
			</p>
			</paragraphs>

			<paragraphs xml:id="_readme">
				<title>README</title>

<!-- div attr= class="paragraph"-->
				<p>
					<idx>README</idx>
					The <c>README</c> file explains your project, what it does, why it is useful, etc.
					If GitHub detects a README file in your source, it will render it on the landing page of the project,
					so this file is often the first item a visitor will see when visiting your repository.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
				<p>
					Many teams use this file to hold all the relevant project information for someone who might be new to the repository or project. This generally includes things like:
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="ulist"-->
				<p><ul>
					<li>
									<p>
					What the project is for
				</p>
					</li>

					<li>
									<p>
					How to configure and install it
				</p>
					</li>

					<li>
									<p>
					An example of how to use it or get it running
				</p>
					</li>

					<li>
									<p>
					The license that the project is offered under
				</p>
					</li>

					<li>
									<p>
					How to contribute to it
				</p>
					</li>

				</ul></p><!--</div attr= class="ulist">-->

<!-- div attr= class="paragraph"-->
				<p>
					Since GitHub will render this file, you can embed images or links in it for added ease of understanding.
				</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect3">-->

<!-- div attr= class="sect3"-->
			</paragraphs>

			<paragraphs xml:id="_code_of_conduct">
				<title>CODE_OF_CONDUCT</title>
				<p>
					<idx>code of conduct</idx>
					The <c>CODE_OF_CONDUCT</c> file explains how one is expected to engage in that particular community. It is typically used to ensure an inclusive environment that respects all people and also typically describes how to address any problems among members of the project's community.
				</p>
			</paragraphs>

			<paragraphs xml:id="_contributing">
				<title>CONTRIBUTING</title>

<!-- div attr= class="paragraph"-->
				<p>
					Another special file that GitHub recognizes is the <c>CONTRIBUTING</c> file. If you have a file named <c>CONTRIBUTING</c> with any file extension, GitHub will show it when anyone starts opening a Pull Request.
				</p><!--</div attr= class="paragraph">-->


<!-- div attr= class="title"-->
<!--</div attr= class="title">--><!--</div attr= xml:id="_contrib_file" class="imageblock">-->

<!-- div attr= class="paragraph"-->
				<p>
					The idea here is that you can specify specific things you want or don’t want in a Pull Request sent to your project. This way people may actually read the guidelines before opening the Pull Request.
				</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect3">-->

<!-- div attr= class="sect3"-->
			</paragraphs>

			<paragraphs xml:id="_project_administration">
				<title>Project Administration</title>

<!-- div attr= class="paragraph"-->
				<p>
					Generally there are not a lot of administrative things you can do with a single project, but there are a couple of items that might be of interest.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="sect4"-->

				<paragraphs xml:id="_changing_the_default_branch">
					<title>Changing the Default Branch</title>

<!-- div attr= class="paragraph"-->
					<p>
						If you are using a branch other than “main” or “master” as your default branch that you want people to open Pull Requests on or see by default, you can change that in your repository’s settings page under the “Options” tab.
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
					<p>
						Simply change the default branch in the dropdown and that will be the default for all major operations from then on, including which branch is checked out by default when someone clones the repository.
					</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect4">-->

<!-- div attr= class="sect4"-->
				</paragraphs>

			</paragraphs>

		</subsection>







		<conclusion>
		<title>Section Summary</title>
			Now you’re a GitHub user. You know how to create an account, manage an organization, create and push to repositories, contribute to other people’s projects and accept contributions from others.
		</conclusion>

	<exercise label = "Git-GitHub" numbered = "yes" language = "natural" adaptive="yes">
		<statement>
			<p>
				Arrange some of the steps below to contribute an edit to an existing project using established GitHub workflow: 
			</p>
		</statement>
		<blocks>
			<block order="1">
				<cline>
				  Fork the project
				</cline>
			</block>
			<block order="2">
				<cline>
					Clone the GitHub repo to your local
				</cline>
			</block>
			<block order="3">
				<cline>
					Create a new topic branch
				</cline>
			</block> 
			<block order ="4">
				<cline>
					Make changes
				</cline>
			</block>
			<block order="5">
				<choice correct = "yes">
					<cline>
						Push to the current branch
					</cline>
				</choice>
				<choice>
					<cline>
						Push to the main branch
					</cline>
				</choice>
			</block>
		
			<block order="6">
				<cline>
					Update current branch from upstream remote
				</cline>
			</block>
			<block order="7">
				<cline>
					Open a Pull Request
				</cline>
			</block>
		</blocks>
	</exercise>
	</section>