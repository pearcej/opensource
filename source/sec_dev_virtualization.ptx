<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="sec_dev_virtualization" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Virtualization</title>
  
<introduction>
  <p>
    In this section, we introduce several types of virtualization. You may run across these technologies while you are setting up a development environment to contribute to an open source project. The goal of this section is just one of familiarization with the terminology because a strong open source community that is welcoming to new contributors will have a README file that you can follow that will help you to get set up.
  </p>
</introduction>

<subsection xml:id="subsec_virtualizaton">
      <title>The What and Why of Virtualization</title>
    
      
      <p>
      <term>Virtualization</term> is a technique that allows for one or more virtual (or simulated) environments to run on a given physical hardware system. Virtualization refers to the creation of virtual versions of system resources, such as operating systems, CPU cores, memory, storage devices, etc.  In a virtualized system, each virtualized environment shares the actual system resources while operating as if it has dedicated resources such as memory, processing power, and storage. In part, because we can create just the right environment for a given application without running into conflicts when different applications have conflicting requirements, virtualization can provide cost-savings, flexibility, and increased efficiency.
    </p>
    <p>
      You may encounter an open source community that uses some of these virtualization techniques because doing so provides benefits to them, perhaps the most important of which is portability. VM images and container images, for example, can typically be easily moved between different environments, making it easier to develop and test software in a consistent environment.
    </p>
  </subsection>

  <subsection xml:id="subsec_virtual_machines">
    <title>Virtual Machines</title>
    <p>
      A <term>virtual machine (VM)</term> is a simulation of a physical computer that runs its own operating system and applications as if it were a completely separate physical computer. VMs rely on a <term>hypervisor</term> (aka a <term>virtualizer</term>) which is a type of computer software, firmware or hardware that creates and runs virtual machines. When using a VM, the physical computer is called the <term>host machine</term> and the virtual machine is called the <term>guest machine</term>. Virtual machines are managed by a software component called a <term>hypervisor</term> which makes sure that each virtual machine gets the needed resources without interfering with any real or other virtual systems.
    </p>
    <p>
      If you are running an older version of Windows that does not support WSL2, and you are planning to set-up a development environment, then you are advised to use a VM running Ubuntu Linux. In the absence of other recommendations, <url href="https://www.virtualbox.org/" visual="www.virtualbox.org/">VirtualBox</url> is a very well-respected and popular open source multi-platform VM environment, so if you are running an older version of Windows, VirtualBox is a recommended VM. 
    </p>
  </subsection>

  <subsection xml:id="subsec_containerization">
    <title>Containerization</title>
    <p>
      A <term>container</term> leverages virtualization at the level of the operating system where every application is provided with its own view of the operating system. Containerization packages an application and its dependencies into a single self-contained unit called a <term>container image</term>, which can be run on almost any host machine with the appropriate software. 
    </p>
    <p>
      Containers are lightweight and fast because they share the host machine's operating system and do not require their own operating system to be installed like VMs do. This makes containers highly portable, as well as easier to manage and deploy.
    </p>

    <p>
      Some key concepts behind of containerization are:
<ul>
  <li>
    <p>
      <em>Standardization: </em> Containers provide a standard way to package and distribute applications, making it easier for open source projects to share and reuse code.
    </p>
  </li>
  <li>
    <p>
      <em>Isolation: </em> Containers provide a way to isolate applications and their dependencies from the host operating system, which reduces the risk of software conflicts.
    </p>
  </li>
  <li>
    <p>
      <em>Portability:</em> Containers are designed to be portable, which means they can be moved between different environments and different systems without modification.
    </p>
  </li>
  <li>
    <p>
      <em>Reproducibility:</em> Containers make it easier to consistently recreate an environment and ensure that an application behaves the same way in development, testing, and production environments.
    </p>
  </li>
</ul>

    </p>

    <p>
      If you are following a README and you are asked to do any of the following installations, then you will be installing a containerized environment: <url href="https://www.docker.com/" visual="www.docker.com/">Docker</url>,  <url href="https://containerd.io/" visual="containerd.io/">Containerd</url>, <url href="https://cri-o.io/" visual="cri-o.io/">CRI-O</url>>, <url href="https://linuxcontainers.org/lxc/" visual="linuxcontainers.org/lxc/">LXC (Linux Container)</url>>, <url href="https://podman.io/" visual="podman.io/">Podman</url>, <url href="https://github.com/rkt/rkt" visual="github.com/rkt/rkt">rkt (Rocket)</url>. Don't panic! The containerization should ultimately make it easier to set up the environment.
    </p>

  </subsection>
  <exercise xml:id="SecDevVirtualization">
    <statement>
      <p>
        Which of the following statements is true regarding the benefits of containerization in open-source projects?
      </p>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement>
          <p>
            Containers offer a shared virtual environment for all applications, promoting better collaboration and resource utilization by eliminating the need for individual dedicated environments.
          </p>
        </statement>
        <feedback>
          <p>
            Containers provide isolated environments for applications, not a shared virtual environment. Each container has its own isolated space, which prevents interference between applications.
          </p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>
            The consistent operating system requirement for container images ensures a more stable and secure runtime environment, reducing the risk of unexpected behavior.
          </p>
        </statement>
        <feedback>
          <p>
            Containers do not require a consistent operating system; they share the host machine's OS. However, containerization can still lead to a more stable and secure runtime environment due to isolation and standardization.
          </p>
        </feedback>
      </choice>
      <choice correct = "yes">
        <statement>
          <p>
            Containerization simplifies the development and testing of software by offering a consistent environment across different systems.
          </p>
        </statement>
        <feedback>
          <p>
            One of the benefits of containerization is that containers provide a consistent environment, which simplifies software development and testing across different systems.
          </p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>
            Containers are especially suitable for running large-scale applications due to their lightweight nature, making them a cost-effective choice for complex projects.
        </p>
        </statement>
        <feedback>
          <p>
            While containers are indeed known for their lightweight nature and portability, their suitability for running large-scale applications is not their primary advantage.
          </p>
        </feedback>
      </choice>
    </choices>
  </exercise>

</section>

