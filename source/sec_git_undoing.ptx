<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec_git_undoing" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>"Undoing" in Git</title>
  <introduction>
    <p>
		At any stage, you may want to undo something. Here, we’ll review a few tools for undoing changes that you’ve made. Be careful though. This is one of the areas in Git where you may lose some work if you do it wrong, because you can’t always undo some of these undos. 
    </p>
  </introduction>

		<section xml:id="_undoing">
			<title>Undoing Changes</title>

<!-- div attr= class="paragraph"-->
			<p>
				One of the common undos takes place when you commit too early and possibly forget to add some files, or you mess up your commit message. If you want to redo that commit, make the additional changes you forgot, stage them, and commit again using the <c>--amend</c> option:
			</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="listingblock"-->
<!-- div attr= class="content"-->
			<pre>$ git commit --amend
      </pre><!--</div attr= class="content">--><!--</div attr= class="listingblock">-->

<!-- div attr= class="paragraph"-->
			<p>
				This command takes your staging area and uses it for the commit. If you’ve made no changes since your last commit (for instance, you run this command immediately after your previous commit), then your snapshot will look exactly the same, and all you’ll change is your commit message.
			</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
			<p>
				The same commit-message editor fires up, but it already contains the message of your previous commit. You can edit the message the same as always, but it overwrites your previous commit.
			</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
			<p>
				As an example, if you commit and then realize you forgot to stage the changes in a file you wanted to add to this commit, you can do something like this:
			</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="listingblock"-->
<!-- div attr= class="content"-->
			<pre>$ git commit -m 'Initial commit'
$ git add forgotten_file
$ git commit --amend
      </pre><!--</div attr= class="content">--><!--</div attr= class="listingblock">-->

<!-- div attr= class="paragraph"-->
			<p>
				You end up with a single commit — the second commit replaces the results of the first.
			</p><!--</div attr= class="paragraph">-->

			<p>
				Note: It’s important to understand that when you’re amending your last commit, you’re not so much fixing it as <em>replacing</em> it entirely with a new, improved commit that pushes the old commit out of the way and puts the new commit in its place. Effectively, it’s as if the previous commit never happened, and it won’t show up in your repository history.
			</p><!--</div attr= class="paragraph">-->

			<p>
				The obvious value to amending commits is to make minor improvements to your last commit, without cluttering your repository history with commit messages of the form, “Oops, forgot to add a file” or “Darn, fixing a typo in last commit”.
			</p>

			<p>
				Note: Only amend commits that are still local and have not been pushed somewhere. Amending previously pushed commits and force pushing the branch will cause problems for your collaborators. 
<!--         For more on what happens when you do this and how to recover if you’re on the receiving end read <url href="ch00/_rebase_peril">The Perils of Rebasing</url>. -->
			</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="sect3"-->

			<paragraphs xml:id="_unstaging">
				<title>Unstaging a Staged File</title>

<!-- div attr= class="paragraph"-->
				<p>
					The next two sections demonstrate how to work with your staging area and working directory changes. The nice part is that the command you use to determine the state of those two areas also reminds you how to undo changes to them. For example, let’s say you’ve changed two files and want to commit them as two separate changes, but you accidentally type <c>git add *</c> and stage them both. How can you unstage one of the two? The <c>git status</c> command reminds you:
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="listingblock"-->
<!-- div attr= class="content"-->
				<pre>$ git add *
$ git status
On branch main
Changes to be committed:
  (use "git reset HEAD &lt;file&gt;..." to unstage)

    renamed:    README.md -&gt; README
    modified:   CONTRIBUTING.md</pre><!--</div attr= class="content">--><!--</div attr= class="listingblock">-->

<!-- div attr= class="paragraph"-->
				<p>
					Right below the “Changes to be committed” text, it says use <c>git reset HEAD &lt;file&gt;…​</c> to unstage. So, let’s use that advice to unstage the <c>CONTRIBUTING.md</c> file:
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="listingblock"-->
<!-- div attr= class="content"-->
				<pre>$ git reset HEAD CONTRIBUTING.md
Unstaged changes after reset:
M   CONTRIBUTING.md
$ git status
On branch main
Changes to be committed:
  (use "git reset HEAD &lt;file&gt;..." to unstage)

    renamed:    README.md -&gt; README

Changes not staged for commit:
  (use "git add &lt;file&gt;..." to update what will be committed)
  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)

    modified:   CONTRIBUTING.md</pre><!--</div attr= class="content">--><!--</div attr= class="listingblock">-->

<!-- div attr= class="paragraph"-->
				<p>
					The command is a bit strange, but it works. The <c>CONTRIBUTING.md</c> file is modified but once again unstaged.
				</p><!--</div attr= class="paragraph">-->

				<p>
					Note: It’s true that <c>git reset</c> can be a dangerous command, especially if you provide the <c>--hard</c> flag. However, in the scenario described above, the file in your working directory is not touched, so it’s relatively safe.
				</p>

<!-- div attr= class="paragraph"-->
				<p>
					For now this magic invocation is all you need to know about the <c>git reset</c> command. 
				</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect3">-->

<!-- div attr= class="sect3"-->
			</paragraphs>

			<paragraphs xml:id="_unmodifying_a_modified_file">
				<title>Unmodifying a Modified File</title>

<!-- div attr= class="paragraph"-->
				<p>
					What if you realize that you don’t want to keep your changes to the <c>CONTRIBUTING.md</c> file? How can you easily unmodify it — revert it back to what it looked like when you last committed (or initially cloned, or however you got it into your working directory)? Luckily, <c>git status</c> tells you how to do that, too. In the last example output, the unstaged area looks like this:
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="listingblock"-->
<!-- div attr= class="content"-->
				<pre>Changes not staged for commit:
  (use "git add &lt;file&gt;..." to update what will be committed)
  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)

    modified:   CONTRIBUTING.md</pre><!--</div attr= class="content">--><!--</div attr= class="listingblock">-->

<!-- div attr= class="paragraph"-->
				<p>
					It tells you pretty explicitly how to discard the changes you’ve made. Let’s do what it says:
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="listingblock"-->
<!-- div attr= class="content"-->
				<pre>$ git checkout -- CONTRIBUTING.md
$ git status
On branch main
Changes to be committed:
  (use "git reset HEAD &lt;file&gt;..." to unstage)

    renamed:    README.md -&gt; README</pre><!--</div attr= class="content">--><!--</div attr= class="listingblock">-->

<!-- div attr= class="paragraph"-->
				<p>
					You can see that the changes have been reverted.
				</p><!--</div attr= class="paragraph">-->

				<p>
					Important: It’s important to understand that <c>git checkout -- &lt;file&gt;</c> is a dangerous command. Any local changes you made to that file are gone — Git just replaced that file with the last staged or committed version. Don’t ever use this command unless you absolutely know that you don’t want those unsaved local changes.
				</p>

<!-- div attr= class="paragraph"-->
				<p>
					If you would like to keep the changes you’ve made to that file but still need to get it out of the way for now, we’ll go over stashing and branching in the following section on Git Branching; these are generally better ways to go.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
				<p>
					Remember, anything that is <em>committed</em> in Git can almost always be recovered. Even commits that were on branches that were deleted or commits that were overwritten with an <c>--amend</c> commit can be recovered. However, anything you lose that was never committed is likely never to be seen again.
				</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect3">-->

<!-- div attr= class="sect3"-->
			</paragraphs>

			<paragraphs xml:id="undoing_git_restore">
				<title>Undoing things with git restore</title>

<!-- div attr= class="paragraph"-->
				<p>
					Git version 2.23.0 introduced a new command: <c>git restore</c>. It’s basically an alternative to <c>git reset</c> which we just covered. From Git version 2.23.0 onwards, Git will use <c>git restore</c> instead of <c>git reset</c> for many undo operations.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
				<p>
					Let’s retrace our steps, and undo things with <c>git restore</c> instead of <c>git reset</c>.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="sect4"-->
        </paragraphs>

				<paragraphs xml:id="_unstaging_a_staged_file_with_git_restore">
					<title>Unstaging a Staged File with git restore</title>

<!-- div attr= class="paragraph"-->
					<p>
						The next two sections demonstrate how to work with your staging area and working directory changes with <c>git restore</c>. The nice part is that the command you use to determine the state of those two areas also reminds you how to undo changes to them. For example, let’s say you’ve changed two files and want to commit them as two separate changes, but you accidentally type <c>git add *</c> and stage them both. How can you unstage one of the two? The <c>git status</c> command reminds you:
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="listingblock"-->
<!-- div attr= class="content"-->
					<pre>$ git add *
$ git status
On branch main
Changes to be committed:
  (use "git restore --staged &lt;file&gt;..." to unstage)
    modified:   CONTRIBUTING.md
    renamed:    README.md -&gt; README</pre><!--</div attr= class="content">--><!--</div attr= class="listingblock">-->

<!-- div attr= class="paragraph"-->
					<p>
						Right below the “Changes to be committed” text, it says use <c>git restore --staged &lt;file&gt;…​</c> to unstage. So, let’s use that advice to unstage the <c>CONTRIBUTING.md</c> file:
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="listingblock"-->
<!-- div attr= class="content"-->
					<pre>$ git restore --staged CONTRIBUTING.md
$ git status
On branch main
Changes to be committed:
  (use "git restore --staged &lt;file&gt;..." to unstage)
    renamed:    README.md -&gt; README

Changes not staged for commit:
  (use "git add &lt;file&gt;..." to update what will be committed)
  (use "git restore &lt;file&gt;..." to discard changes in working directory)
    modified:   CONTRIBUTING.md</pre><!--</div attr= class="content">--><!--</div attr= class="listingblock">-->

<!-- div attr= class="paragraph"-->
					<p>
						The <c>CONTRIBUTING.md</c> file is modified but once again unstaged.
					</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect4">-->

<!-- div attr= class="sect4"-->
				</paragraphs>

				<paragraphs xml:id="_unmodifying_a_modified_file_with_git_restore">
					<title>Unmodifying a Modified File with git restore</title>

<!-- div attr= class="paragraph"-->
					<p>
						What if you realize that you don’t want to keep your changes to the <c>CONTRIBUTING.md</c> file? How can you easily unmodify it — revert it back to what it looked like when you last committed (or initially cloned, or however you got it into your working directory)? Luckily, <c>git status</c> tells you how to do that, too. In the last example output, the unstaged area looks like this:
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="listingblock"-->
<!-- div attr= class="content"-->
					<pre>Changes not staged for commit:
  (use "git add &lt;file&gt;..." to update what will be committed)
  (use "git restore &lt;file&gt;..." to discard changes in working directory)
    modified:   CONTRIBUTING.md</pre><!--</div attr= class="content">--><!--</div attr= class="listingblock">-->

<!-- div attr= class="paragraph"-->
					<p>
						It tells you pretty explicitly how to discard the changes you’ve made. Let’s do what it says:
					</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="listingblock"-->
<!-- div attr= class="content"-->
					<pre>$ git restore CONTRIBUTING.md
$ git status
On branch main
Changes to be committed:
  (use "git restore --staged &lt;file&gt;..." to unstage)
    renamed:    README.md -&gt; README
    </pre>
    


        <p>
          Important: It’s important to understand that <c>git restore &lt;file&gt;</c> is a dangerous command. Any local changes you made to that file are gone — Git just replaced that file with the last staged or committed version. Don’t ever use this command unless you absolutely know that you don’t want those unsaved local changes.
        </p>

			<exercise xml:id="ex_git_oh_shit_git">
				<title>Read External Git Undoing Summary</title>
				
				<p>
					For a humorous summary of undoing in Git, go to <url href="https://ohshitgit.com/" visual="ohshitgit.com/">Oh Shit, Git!?!</url> 
				</p>
			</exercise>

		</paragraphs>

		</section>
		

  <conclusion>
    <title>Section Summary</title>
    <p>
		As you have learned from this section, Git provides several tools for undoing changes that you have made. One of the most common undos is when you commit too early and forget to add some files, or you mess up your commit message or if you accidentally stage a file that you didn't mean to. However, it's important to be careful when using these commands because you can't always undo some of these undos.
    </p>
  </conclusion>
  <exercise xml:id="gitUndoing">
	<statement>
	  <p>
		Suppose you have inadvertently committed one or more changes to a file and want to discard the changes to revert it back to its last committed state. Which Git command should you use? Select all that apply.
	  </p>
	</statement>
	<choices randomize = "yes">
	  <choice correct = "yes">
		<statement>
		  <p>
			<c>git checkout -- &lt;file&gt;</c>
		  </p>
		</statement>
		<feedback>
		  <p>
			Corect! This command allows you to discard changes made to a specific file and revert it back to its last committed state.
		</p>
		</feedback>
	  </choice>
	  <choice>
		<statement>
		  <p>
			<c>git reset --hard HEAD</c>
		  </p>
		</statement>
		<feedback>
		  <p>
			This command resets the entire working directory to the state of the last commit. Be careful, as it will discard all changes, including those in other files.
		  </p>
		</feedback>
	  </choice>
	  <choice correct = "yes">
		<statement>
		  <p>
			<c>git restore &lt;file&gt;</c>
		  </p>
		</statement>
		<feedback>
		  <p>
			Correct! This command allows you to restore a file to a previous state, <term>but</term> it requires specifying the commit or reference from which to restore the file.
		  </p>
		</feedback>
	  </choice>
	  <choice>
		<statement>
		  <p>
			<c>git revert HEAD</c>
		</p>
		</statement>
		<feedback>
		  <p>
			The command git revert HEAD is used to create a new commit that undoes the changes introduced by the last commit, which is pointed to by the HEAD reference
		  </p>
		</feedback>
	  </choice>
	  <choice>
		<statement>
			<p>
				<c>git --unamend &lt;file&gt;</c>
			</p>
		</statement>
		<feedback>
			<p>
				This is not a valid git command.
			</p>
		</feedback>
	  </choice>
	  <choice>
		<statement>
			<p>
				<c>git reset &lt;file&gt;</c>
			</p>
		</statement>
		<feedback>
			<p>
				This command unstages the file but does not revert any changes made in it.
			</p>
		</feedback>
	  </choice>
	</choices>
  </exercise>
</section>

