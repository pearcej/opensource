<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec_dev_editors" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>We All Need an Editor!</title>

      <p>
        <term>Text editors</term> are programs that help the user create and edit text files. Popular editors like Microsoft Word do not have the features that are needed by software developers and can not easily be used for editing source code because they can cause problems with the code itself due to the way they store formatted text. In short, Microsoft Word is not a text editor and should never be used to edit source code because source code is a text file.
      </p>
      <p>
        Professional software developers use text editors that are specifically designed to work with source code. These are sometimes called <term>source code editors</term>, <term>code editors</term> or just <term>editors</term>. Code editors typically include many special features for writing and editing code that go well beyond the typical uses such as finding and replacing, undoing, deleting, etc. It is worth noting that some professional developers prefer to use a text editor configured for working with code while others prefer to use 
        an <term>Integrated Development Environment (IDE)</term> which is a tool that in addition to having source code editor functionality combines other commonly used developer tools in a single application. Because some text editors are so highly configurable using a variety of plug-ins and extensions, the line between text editors and IDEs has become quite blurred in recent years. Nevertheless, some of the main tools found in IDEs include:
      </p> 
      <ul>
        <li>
          <p>
            <em>code editor</em> - which in addition to the standard find, replace, undo, redo, delete, etc, typically has block features like block indentation and dedentation, and block commenting and uncommenting. 
          </p>
        </li>
        <li>
          <p>
            <em>code debugger</em> - offers built-in tools to detect and diagnose errors in the code, including features such as variable inspection, stepping over and into code during execution, and setting break-points.
          </p>
        </li>
           <li>
        <p>
          <em>file explorer </em>- a visual representation of the file system for easy navigation.
        </p>
      </li>

        <li> 
          <p>
            <em>compiler or interpreter integration</em> - Is able to convert the programming language to machine code and run the code from within the IDE.
          </p>
        </li>
        <li>
        <p>
          <em>search</em> - the ability to search through an entire codebase for a search term.
        </p>
      </li>
        <li>
        <p>
          <em>syntax highlighting</em> - where different colors and/or styles of text are used to differentiate between comments, keywords, strings, etc.
        </p>
      </li>
        <li>
          <p>
            <em>terminal integration</em> - offers access to the shell directly from within the IDE.
          </p>
        </li>
        <li>
          <p>
            <em>version control integration</em> - facilitates the tracking and management of all code changes without leaving the IDE.
          </p>
        </li>
      </ul>
      
      <p>
        Professional developers all have their favorite editor, and searching for something like "best editor to use for software development" will bring up a host of answers and lists of popular editors. In addition to the code editor, code interpreter/compiler, code debugger,  integrated terminal, and tools for version control, the following is a list of other popular features in IDEs: 
    </p>
    <ul>
      <li>
        <p>
          <em>code completion</em> - offering suggestions based on the context of the code being written.
        </p>
      </li>
      <li>
        <p>
          <em>code folding</em> - the ability to collapse sections of code to better focus the workspace.
        </p>
      </li>
      <li>
        <p>
          <em>code refactoring</em> - which is improving or updating code without changing its functional attributes.
          </p>
      </li>
      <li>
        <p>
          <em>code snippets</em> - which are pre-written code blocks that can be inserted into the code quickly.
        </p>
      </li>
      <li>
        <p>
          <em>multi-language support</em> - the ability to work effectively with a variety of programming languages and their varying syntaxes.
        </p>
      </li>
            <li>
        <p>
          <em>profiling support</em> - helps to analyze the performance of the code.
        </p>
      </li>
      <li>
        <p>
          <em>testing support</em> - facilitates the running of tests and the use of test-suites, sometimes in an automated fashion during the editing process.
        </p>
      </li>
    </ul>
    <p>
      The most popular editors used by contributors to open source projects include <url href="https://www.gnu.org/software/emacs/download.html" visual="www.gnu.org/software/emacs">Emacs</url>, <url href="https://www.vim.org/" visual="www.vim.org">Vim</url>, and <url href="https://code.visualstudio.com/Download" visual="code.visualstudio.com">Visual Studio Code aka VSCode</url>. (Warning, VSCode, which is formally named Visual Studio Code, is not the same software as Visual Studio. This rightfully causes a lot of confusion!) For novice contributors to open source, <url href="https://code.visualstudio.com/Download" visual="code.visualstudio.com">VSCode</url> is recommended as a first choice because it is cross-platform and has reasonably shallow learning curve. It also happens to be open-source! 
    </p>
    <p>
      If you are interested in getting started with VSCode, you might begin with <url href="https://code.visualstudio.com/docs/introvideos/basics" visual="code.visualstudio.com/docs/introvideos/basics">VSCode's Getting Started Videos and Guide.</url>
    </p>
    <exercise xml:id="needAnEditor">
      <statement>
        <p>
          Which feature in Integrated Development Environments (IDEs) allows developers to analyze the performance of their code?
        </p>
      </statement>
      <choices randomize="yes">
        <choice>
          <statement>
            <p>
              Multi-language support
            </p>
          </statement>
          <feedback>
            <p>
              Multi-language support will give us the ability to work effectively with a variety of programming languages and their varying syntaxes..
          </p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>
              Code debugger 
            </p>
          </statement>
          <feedback>
            <p>
              Code debugger detects and diagnoses errors in the code, including variable inspection and setting breakpoints. This feature helps developers identify and fix bugs in their code during the development process.
            </p>
          </feedback>
        </choice>
        <choice correct = "yes">
          <statement>
            <p>
              Profiling support 
            </p>
          </statement>
          <feedback>
            <p>
              Correct! This feature enables developers to measure the execution time and resource usage of their code to optimize performance. It helps to analyze the performance of the code.
            </p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>
              Code folding 
          </p>
          </statement>
          <feedback>
            <p>
              Code folding collapses sections of code to better focus the workspace
            </p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>
              Code refactoring	
          </p>
          </statement>
          <feedback>
            <p>
              Code refactoring automates code restructuring to improve readability and maintainability. 
            </p>
          </feedback>
        </choice>
      </choices>
    </exercise>
</section>

