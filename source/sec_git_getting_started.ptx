<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec_git_getting_started">
	<title>Getting Started with Git</title>
	
<subsection xml:id="sec_git_types_version_control" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Types of Version Control</title>

			<p>
	Using a formal <term>version control system (VCS)</term> has many advantages over using just an informal system of version control like the one we described in the last section. Some of the important advantages of VCSs include:
	<ul>
		<li>
			<title>Versioning</title>
			<p>
				They allow users to track changes to a codebase over time. Users can see why changes were made and can go back to a previous version of the code if needed.
			</p>
		</li>
		<li>
			<title>Collaboration</title>
			<p>
				They allow multiple people to work on the same project at the same time, make changes to the code, and track the changes made by others. This facilitates collaboration.
			</p>
		</li>
		<li>
			<title>Branching and Merging</title>
			<p>
				 They allow users to create different branches of the codebase, which enables developers to work on separate features or fixes without affecting the main codebase. Once changes are completed and approved, the branches can be merged back into the main codebase.
			</p>
		</li>
	</ul>
	
	For the examples in this chapter, we will use software source code as the files being version controlled, although in reality you can do this with nearly any type of file or set of files. For example, if you are a website designer and want to keep every version of the site, a VCS is a very wise thing to use. It allows you to revert selected files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more. Using a VCS also generally means that if you mess things up or lose files, you can easily recover. 
</p>
</subsection>

	<subsection xml:id="sec_local_version_control_systems">
		<title>Local VCSs</title>
	<p>
		
	</p>
		<p>
			Many people’s first personal version-control method of choice is an informal one such as copying files into another directory or up into the cloud. These informal approaches are common because they are simple, but they are also  error prone. It is easy to forget which directory you’re in and accidentally write to the wrong file or copy over files you don’t mean to. 
		</p>

		<p>
			To deal with this issue, programmers long ago developed a more formal system of version control.  Local VCSs provide a more automatic, less error-prone and more structured way of keeping all the changes to files under revision control on the local computer.
			Local VCSs typically operate quickly because they do not have to communicate with a remote server. With a local system, developers have access to the entire history of the codebase on their local machine, and they can work on the codebase offline, without an internet connection. 
		</p>
		<p>
			However, there are significant disadvantages to using local VCSs. For example, local VCSs do not support collaboration because multiple developers cannot easily work on the same codebase at the same time. So. local VCSs are more suited for individual developers who are working on their own projects. Local VCSs store code data locally, which increases the risk of data loss due to machine failure or corruption because whenever you have the entire history of a project in a single place, you risk losing everything.
			In addition, local systems are not scalable, so as the codebase grows in size, the performance of the local system may degrade.
		</p>
			
	
	</subsection>
	<subsection xml:id="sec_centralized_version_control_systems">
		<title>Centralized VCSs</title>
<p>

</p>

		<p>
			Many developers need to collaborate with other developers on other systems. To deal with this, centralized VCSs were developed. These systems (such as CVS, Subversion, and Perforce) have a single server that contains all the versioned files, and a number of clients check out files from that central server. For many years, this was the standard for version control.
		</p>

			<p>
			Centralized VCSs offer many advantages over local VCSs. For example, everyone knows or can see to a certain degree what everyone else on the project is doing. Administrators have fine-grained control over who can do what.
		</p>

			<p>
			However, centralized VCSs also have some serious downsides. Conflict resolution can be a challenge because if individual copies of the repository diverge significantly from one another, conflicts can arise when merging changes is attempted. This lead to a process of resolving the conflicts, which can be time-consuming even when using conflict resolution tools. In fact, resolution of conflicts can delay the development process. To mitigate this, developers must communicate regarding direction and must also synchronize copies of the codebase regularly by merging changes  often. Effective communication and frequent updating can help prevent significant divergence and reduce the risk of conflicts in centralized VCSs.
		</p>

		<p>
			Another obvious is that like local VCSs, the centralized server represents a single point of failure. If that server goes down for an time, then during that downtime nobody can collaborate at all and no one can save versioned changes to anything they’re working on. If the disk of the central server becomes corrupted, and proper backups haven’t been kept, the project could lose absolutely everything — the entire history of the project except whatever single snapshots people happen to have on their local machines. 
		</p>

	</subsection>

	<subsection xml:id="sec_distributed_version_control_systems">
		<title>Distributed VCSs</title>
<p>

</p>
		<p>
			This is where distributed VCSs step in. In a distributed VCS (such as Git, Mercurial, Bazaar or Darcs), clients don’t just check out the latest snapshot of the files; rather, they fully mirror the repository, including its full history. Thus, if any server dies, and these systems were collaborating via that server, any of the client repositories can be copied back up to the server to restore it. Every clone is really a full backup of all the data.
		</p>


		<figure xml:id="git-distributed">
		<caption>Distributed Version Control</caption>	
			<image source='distributed.png'>
			<description>Describe the distributed version database that communicates through the server computer with several remote repositories.</description>
			</image>

		</figure>

		<p>
			Furthermore, many of these distributed systems deal pretty well with having several remote repositories they can work with, so you can collaborate with different groups of people in different ways simultaneously within the same project. This allows you to set up several types of workflows that aren’t possible in centralized systems, such as hierarchical models.
		</p>

	</subsection>

	<subsection xml:id="_a_short_history_of_git">
			<title>A Short History of Git</title>
<p>
	
</p>
<!-- div attr= class="paragraph"-->
			<p>
				As with many great things in life, Git began with a bit of creative destruction and fiery controversy.
			</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
			<p>
				The bridge of communication in a Linux system between the user applications and the underlying hardware is called the  kernel, and the Linux kernel is an open source software project of fairly large scope. 
				During the early years of kernel maintenance (1991–2002), changes to the software were passed around by email as descriptions of the differences in source files. In 2002, the Linux kernel project began using a proprietary distributed VCS called BitKeeper.
			</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
			<p>
				In 2005, the relationship between the community that developed the Linux kernel and the commercial company that developed BitKeeper broke down, and the tool’s free-of-charge status was revoked. This prompted the Linux development community (and in particular Linus Torvalds, the creator of Linux) to develop their own tool based on some of the lessons they learned while using BitKeeper. Some of the goals of the new system were as follows:
			</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="ulist"-->
			<p><ul>
				<li>
							<p>
				Speed
			</p>
				</li>

				<li>
							<p>
				Simple design
			</p>
				</li>

				<li>
							<p>
				Strong support for non-linear development (supports new/separate versions called branches that do not conflict with one another during development).
			</p>
				</li>

				<li>
							<p>
				Fully distributed
			</p>
				</li>

				<li>
							<p>
				Able to handle large projects like the Linux kernel efficiently (speed and data size)
			</p>
				</li>

			</ul></p><!--</div attr= class="ulist">-->

<!-- div attr= class="paragraph"-->
			<p>
				Since its birth in 2005, Git has evolved and matured to be easy to use and yet retain these initial qualities. It’s amazingly fast, it’s very efficient with large projects, and it has an incredible branching system for non-linear development.
				<!-- TODO(See <xref="sec_git_branching"> Git Branching</xref>).-->
			</p><!--</div attr= class="paragraph">-->

	</subsection>

	<subsection xml:id="sec-what-is-git">
		<title>What is Git?</title>

<!-- div attr=-->

		<introduction>
	


<!-- div attr= class="paragraph"-->
			<p>
				So, what is Git in a nutshell? This is an important topic to absorb, because if you understand what Git is and the fundamentals of how it works, then using Git effectively will probably be much easier for you. 
			</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="sect3"-->
		</introduction>

			<subsubsection xml:id="sec_snapshots_not_differences">
				<title>Snapshots, Not Differences</title>
<p>
	
</p>
<!-- div attr= class="paragraph"-->
				<p>
					The major difference between Git and most other VCSs is the way Git thinks about its data. Conceptually, most other systems store information as a list of file-based changes. These other systems (CVS, Subversion, Perforce, Bazaar, and so on) think of the information they store as a set of files and the changes made to each file over time (This is commonly described as <em>delta-based</em> version control).
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="imageblock"-->
<!-- div attr= class="content"-->
				<figure xml:id="git-deltas">
					<caption>Storing data as changes to a base version of each file</caption>

				<image source='deltas.png'> 
					<description> Demonstrates version control about how staging, commit and push work together to store only deltas when changes are made to different files. </description>
				</image>
				</figure>

				<p>
					<idx>stream of snapshots</idx>
					Git doesn’t think of or store its data this way. Instead, Git thinks of its data more like a series of snapshots of a miniature filesystem. With Git, every time you commit, or save the state of your project, Git basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot. To be efficient, if files have not changed, Git doesn’t store the file again, just a link to the previous identical file it has already stored. Git thinks about its data more like a <term>stream of snapshots</term>.
				</p><!--</div attr= class="paragraph">-->



				<figure xml:id="git-snapshots">
					<caption>Storing data as snapshots of the project over time</caption>

				<image source='snapshots.png'>
					<description>Chart showing example of Git storing data over time across 5 versions and 3 files.</description>
				</image><!--</div attr= class="content">-->
				</figure>
				<p>
					This is an important distinction between Git and nearly all other VCSs. It makes Git reconsider almost every aspect of version control that most other systems copied from the previous generation. This makes Git more like a mini filesystem with some incredibly powerful tools built on top of it, rather than simply a VCS. We’ll explore some of the benefits you gain by thinking of your data this way when we cover Git branching in <!--TODO-->Git Branching.
				</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect3">-->

<!-- div attr= class="sect3"-->
			</subsubsection>

			<subsubsection xml:id="sec_nearly_every_operation_is_local">
				<title>Nearly Every Operation Is Local</title>
<p>
	
</p>
<!-- div attr= class="paragraph"-->
				<p>
					Most operations in Git need only local files and resources to operate — generally no information is needed from another computer on your network. Because you have the entire history of the project right there on your local disk, most operations seem almost instantaneous.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
				<p>
					For example, to browse the history of the project, Git doesn’t need to go out to the server to get the history and display it for you — it simply reads it directly from your local repository. This means you see the project history almost instantly. If you want to see the changes introduced between the current version of a file and the file a month ago, Git can look up the file a month ago and do a local difference calculation, instead of having to either ask a remote server to do it or pull an older version of the file from the remote server to do it locally.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
				<p>
					This also means that there is very little you can’t do if you’re offline. If you get on an airplane or a train and want to do a little work, you can commit happily (to your <em>local</em> copy, remember?) until you get to a network connection to upload. 
				</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect3">-->

<!-- div attr= class="sect3"-->
			</subsubsection>

			<subsubsection xml:id="sec_git_has_integrity">
				<title>Git Has Integrity</title>
<p>
	
</p>
<!-- div attr= class="paragraph"-->
				<p>
					Everything in Git is stored via a unique digital fingerprint of the data. This means it’s impossible to change the contents of any file or directory without Git knowing about it. This functionality is built into Git at the lowest levels and is integral to its philosophy. You can’t lose information in transit or get file corruption without Git being able to detect it.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
				<p>
					<idx>SHA-1 hash</idx>
					The mechanism that Git uses for creating this unique digital fingerprint of the data is called a <term>SHA-1 hash</term>. This is a 40-character string composed of hexadecimal characters (0–9 and a–f) and calculated based on the contents of a file or directory structure in Git. A SHA-1 hash looks something like this:
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="listingblock"-->
<!-- div attr= class="content"-->
				<pre>24b9da6552252987aa493b52f8696cd6d3b00373</pre><!--</div attr= class="content">--><!--</div attr= class="listingblock">-->

<!-- div attr= class="paragraph"-->
				<p>
					You will see these hash values all over the place in Git because it uses them so much. In fact, Git stores everything in its repository not by file name but by the hash value of its contents. Because they are a long incomprehensible strings, they look strange, but try not to let that bother you.
				</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect3">-->

<!-- div attr= class="sect3"-->
			</subsubsection>

			<subsubsection xml:id="sec_git_generally_only_adds_data">
				<title>Git Generally Only Adds Data</title>
<p>
	
</p>
<!-- div attr= class="paragraph"-->
				<p>
					During ordinary use of Git, nearly all of your actions only add data. It is intended to be hard to get Git to do anything that is not undoable or to make it erase data in any way. As with any VCS, you can lose or mess up changes you haven’t committed yet, but after you commit a snapshot into Git, it is more difficult to lose, specially if you regularly push the state of your repository to a remote. Having said this, novices can get themselves into a mess. Some advice is to always make sure you are working on a branch <em>other than main or master</em>, and always check to be sure you are on the intended branch before you begin working.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->


<!-- div attr= class="sect3"-->
			</subsubsection>

			<subsubsection xml:id="sec_the_three_states">
				<title>The Three File States</title>
<p>
	
</p>
<!-- div attr= class="paragraph"-->
				<p>
					Pay attention now — here is the main set of concepts to remember about files in Git if you want the rest of your learning process to go smoothly. Git has three main states that your files can reside in, <em>modified</em>, <em>staged</em>, and <em>committed</em>:
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="ulist"-->
				<p><ul>
					<li>
									<p>
								<idx>modified</idx>
					<term>Modified</term> means that you have changed the file but have not committed it to your repository yet.
				</p>
					</li>

					<li>
									<p>
										<idx>staged</idx>
					<term>Staged</term> means that you have marked a modified file in its current version to go into your next commit snapshot.
				</p>
					</li>

					<li>
									<p>
										<idx>committed</idx>
					<term>Committed</term> means that the data is safely stored in your local repository.
				</p>
					</li>

				</ul>
				As a metaphor for better understanding these concepts, let's imagine you are shopping for a shirt and some other items online. You find a page with a shirt you are considering, and you make several choices by clicking on things like the style (long-sleeved vs short-sleeved, for example), the size, the color, etc. The state of your browser has been modified from the default state, but you haven't completely decided if you want it, so you have not put it into your shopping cart. That is analogous to <em>modifying</em> your codebase before staging in Git. 
				</p>
				<p>
				Next, maybe you decide that you like these shirt choices enough that you don't want to lose them, so you put the style, size, and color shirt you like into your shopping cart. That is analogous to <em>staging</em> — you have not yet completely committed to buying the shirt, but you are ready to do so, and you are still able to change your mind and make additional changes to your choices or remove the shirt from the shopping cart altogether. You can also keep shopping and postpone making a decision about buying while you continue shopping.
				</p>
				<p>
				Once you have made all of your shopping choices and are ready to commit to paying for the items in your shopping cart, you go through the process of paying. This is analogous to <em>committing</em> — you have made a commitment to receive the items that you paid for, and the online store keeps a record of your purchase. Of course, once you receive the shirt and it isn't quite what you had hoped for, you can still return the shirt, but it is more complicated to do so than before you made the purchase and a record will be made of the return as well. This is also analogous to how Git works. 
				
				</p><!--</div attr= class="ulist">-->
				<p>
					The concepts of modified, staged, and committed describe the different stages that files can go through as they are modified and committed to the repository. Next, let's discuss how Git is organized.
				</p>
			</subsubsection>
			<subsubsection xml:id="sec_git_organization">
				<title>How Git is Organized</title>
<p>
	
</p>
<!-- div attr= class="paragraph"-->
				<p>
					A Git repository is more than just a set of files. It is also more than just a set of snapshots of files. It's a complete history of a project's development, which includes information about who made what changes, when those changes were made, and why they were made because the repository includes not only the committed snapshots of files, but also the metadata that accompanies those snapshots, such as commit messages and author information. Additionally, the repository includes information about the branches and tags that have been created to manage the development of the project. 
				</p>
				<p>
					This leads us to three key components of a Git VCS: the Git working tree, the Git staging area, and the Git directory.
				</p><!--</div attr= class="paragraph">-->


				<figure xml:id="git-areas">
					<caption>Git working tree, Git staging area, and Git directory</caption>

				<image source='areas.png'><!--</div attr= class="content">-->
					<description>Visual has rows of arrow, checkout pointing from Repository to working, stage points from working directory to staging, commit arrow pointing from staging to .git repository.
					</description>
				</image>
				</figure>

				<p>
					<idx>git working tree</idx>
					The <term>Git working tree</term> refers to the set of files and directories that are currently being worked on in a local repository, but it is more than just the set of files and directories. It is also a service that continuously monitors the resource status of the files and the file system in that local repository. For example, the Git working tree logs when a new file is added or deleted or modified. 
				</p><!--</div attr= class="paragraph">-->
				<p>
					When you use stage changes, Git copies the changes from the modified files that are in the working tree to the staging area.
				</p>

				<p xml:id="id_git_staging_area">
					<idx>git index</idx>
					<idx>git staging area</idx>
					The <term>Git staging area </term>, also known as the <term>Git index</term>, is a file where the changes to files that have been staged are stored and stand ready to be committed.
				</p>
				<p>
					Once changes have been staged in the staging area, you can create a new commit. This then takes the staged changes and creates a new snapshot of the files in the Git directory.
				</p>

<!-- div attr= class="paragraph"-->
				<p>
					
					<idx>git directory</idx>
					The <term>Git directory</term> is where all the committed snapshots of the project are stored along with the associated metadata, such as commit messages and author information.  This is the most important part of Git. Along with the files and file directory, the Git directory is copied when you <em>clone</em> a repository from another computer.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
				<p>
					The basic Git workflow goes something like this:
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="olist arabic"-->
				<p><ol>
					<li>
									<p>
					You modify files in your working tree.
				</p>
					</li>

					<li>
									<p>
					You selectively stage just those changes you want to be part of your next commit, which adds <em>only</em> those changes to the staging area.
				</p>
					</li>

					<li>
									<p>
					You then do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your local Git directory (on your computer). Note that in <xref ref="sec_git_github"/>, we will learn how to push your work to a remote copy of the repository.
				</p>
					</li>

				</ol></p><!--</div attr= class="olist arabic">-->

<!-- div attr= class="paragraph"-->
				<p>
					If a particular version of a file is in the Git directory, it’s considered <em>committed</em>. If it has been modified and was added to the staging area, it is <em>staged</em>. And if it was changed since it was checked out but has not been staged, it is <em>modified</em>. In <!--TODO--> <xref ref="sec_git_basics"/> you’ll learn more about these states and how you can either take advantage of them or skip the staged part entirely.
				</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect3">-->


			</subsubsection>

	</subsection>
	<subsection xml:id="sec_git_on_the_command_line">
				<title>The Command Line</title>

	<!-- div attr= class="paragraph"-->
				<p>
					There are a lot of different ways to use Git. There are the original command-line tools, and there are many graphical user interfaces of varying capabilities. For this chapter, we will be using Git on the command line. For one, the command line is the only place you can run <em>all</em> Git commands — most of the GUIs implement only a partial subset of Git functionality for simplicity. If you know how to run the command-line version, you can probably also figure out how to run the GUI version, while the opposite is not necessarily true. Also, while your choice of graphical client is a matter of personal taste, <em>all</em> users will have the command-line tools installed and available.
				</p><!--</div attr= class="paragraph">-->

	<!-- div attr= class="paragraph"-->
				<p>
					So you will need to to know how to open the Terminal in macOS or Linux or the Command Prompt or PowerShell in Windows. If you don’t remember what we’re talking about here, please review <xref ref="sec_dev_shell"/>.
				</p><!--</div attr= class="paragraph">-->

				<!--TODO add directions on how to get to a terminal in all environments-->


	</subsection>

	<subsection xml:id="git_installing">
		<title>Installing Git</title>
<introduction>
	<!-- div attr= class="paragraph"-->
		<p>
			Before you start using Git, you have to make it available on your computer. Even if it’s already installed, it’s probably a good idea to update to the latest version. You can either install it as a package or via another installer, or download the source code and compile it yourself. If you are a beginner, we strongly recommend using an installer.
		</p><!--</div attr= class="paragraph">-->

	<!-- div attr= class="admonitionblock note"-->
	<!-- 			<table>
				<caption></caption>
	<col width="50%" />
	<col width="50%" />
				<tabular>
				<row class="odd">
					<cell halign="left">
	Note
	</cell>
					<cell halign="left">
			<p>
				This section was written using Git version <term>2.8.0</term>. Though most of the commands we use should work even in ancient versions of Git, some of them might not or might act slightly differently if you’re using an older version. Since Git is quite excellent at preserving backwards compatibility, any version after 2.8 should work just fine.
			</p>
			</cell>
				</row>
				</tabular>
			</table> -->

	<!-- div attr= class="sect3"-->
</introduction>
	<subsubsection xml:id="git_installing_on_linux">
		<title>Installing on Linux</title>
	<p>

	</p>
	<!-- div attr= class="paragraph"-->
		<p>
			Using your Linux distribution's preferred package manager is the simplest process for installing Git on Linux.
					
			</p>
		<p>
			If you’re on a Debian-based distribution, such as Ubuntu, try <c>apt</c>:
		</p><!--</div attr= class="paragraph">-->

		<pre>$ sudo apt install git-all</pre>

		
			<p>
			If you’re on Fedora (or any closely-related RPM-based distribution, such as RHEL or CentOS), you can use <c>dnf</c>:
		</p><!--</div attr= class="paragraph">-->

	<!-- div attr= class="listingblock"-->
	<!-- div attr= class="content"-->
		<pre>$ sudo dnf install git-all</pre><!--</div attr= class="content">--><!--</div attr= class="listingblock">-->

	<!-- div attr= class="paragraph"-->


	<!-- div attr= class="paragraph"-->
		<p>
			For more options, there are instructions for installing on many different Linux distributions on the Git website, at <url href="https://git-scm.com/download/linux" visual="git-scm.com/download/linux">https://git-scm.com/download/linux</url>.
		</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect3">-->

	<!-- div attr= class="sect3"-->
	</subsubsection>

	<subsubsection xml:id="git_installing_on_macos">
		<title>Installing on MacOS</title>
	<p>

	</p>
	<!-- div attr= class="paragraph"-->
		<p>
			There are several ways to install Git on a Mac. 
		</p>

		<p>
			One way is to install homebrew if you don't already have it. Go to <url href="https://brew.sh/" visual="brew.sh"></url> and follow the directions. Then open a Terminal and type:</p>
			<pre>
			brew install git
			</pre>
			
			<p>
			Another excellent way is to install the Xcode Command Line Tools, which is an Apple package with useful developer tools that run on the command line. Apply has made this very easy to do simply by trying to run Git from the Terminal the very first time. If you open a terminal and type the following:
		</p>


		<pre>$ git --version</pre><!--</div attr= class="content">--><!--</div attr= class="listingblock">-->

	<!-- div attr= class="paragraph"-->
		<p>
			When you run that command, if you don’t have Git installed already, it will prompt you to install it.
		</p><!--</div attr= class="paragraph">-->

	<!-- div attr= class="paragraph"-->
		<p>
			For these and additional options visit <url href="https://git-scm.com/download/mac" visual="git-scm.com/download/mac">https://git-scm.com/download/mac</url>.
		</p><!--</div attr= class="paragraph">-->


	<!-- div attr= class="sect3"-->
	</subsubsection>

	<subsubsection xml:id="_installing_on_windows">
		<title>Installing on Windows</title>
	<p>

	</p>
	<!-- div attr= class="paragraph"-->
		<p>
			There are also a few ways to install Git on Windows that depend upon where your development environment is.
		</p>
		<p>
			If you are using WSL2 or are developing in a VM, then open a terminal in that environment and follow the directions for installing Git in Ubuntu from the Linux section above. 
		</p>
			
		<p>
			If you are working in WSL2, Git for Windows might also be useful. Git for Windows provides a native set of tools that bring the full feature set of the Git SCM to Windows as well as bash emulation which can be used to run Git from the command line. To install go to <url href="https://gitforwindows.org" visual="gitforwindows.org">https://gitforwindows.org</url>. Not that Git for Windows will not be useful to you if you are developing in a VM running Ubuntu.
		</p><!--</div attr= class="paragraph">-->

	<!-- div attr= class="sect3"-->
	</subsubsection>
	</subsection>

	<subsection xml:id="_git_help">
	<title>Getting Help</title>

	<!-- div attr= class="paragraph"-->
	<p>
	If you ever need help while using Git, there are three equivalent ways to get help for any of the Git commands:
	</p><!--</div attr= class="paragraph">-->

	<!-- div attr= class="listingblock"-->
	<!-- div attr= class="content"-->
	<pre>$ git help &lt;verb&gt;
	$ git &lt;verb&gt; --help
	$ man git-&lt;verb&gt;</pre><!--</div attr= class="content">--><!--</div attr= class="listingblock">-->

	<!-- div attr= class="paragraph"-->
	<p>
	For example, you can get help for the <c>git config</c> command by running this:
	</p><!--</div attr= class="paragraph">-->

	<!-- div attr= class="listingblock"-->
	<!-- div attr= class="content"-->
	<pre>$ git help config</pre><!--</div attr= class="content">--><!--</div attr= class="listingblock">-->
	<!-- div attr= class="paragraph"-->
	<p>
	If you don’t need the full-blown manpage help, but just need a quick refresher on the available options for a specific Git command, you can ask for the more concise “help” output with the <c>-h</c> option, as in the following for the Git <c>add command:</c>:
	</p><!--</div attr= class="paragraph">-->

	<!-- div attr= class="listingblock"-->
	<!-- div attr= class="content"-->
	<pre>$ git add -h
	</pre>

	</subsection>

	<subsection xml:id="sec_git_config">
	<title>First-Time Git Setup</title>
	<p>
		Now that you have Git on your system, you’ll want to do a few things to customize your Git environment. You should have to do these things only once on any given computer; they’ll stick around between upgrades. You can also change them at any time by running through the commands again. 
	</p>

	<p>
		<idx>git config</idx>
		Git can be configured using <term>git config</term> which lets you get and set configuration variables that control all aspects of how Git looks and operates.
	</p>

	<p>
		The first thing you should do when you install Git is to set your user name and email address. This is important because every Git commit uses this information, and it’s immutably baked into the commits you start creating:

	</p>
	<pre>
		$ git config --global user.name "John Doe"
		$ git config --global user.email johndoe@example.com
	</pre>

	<p>
	Again, you need to do this only once if you pass the <c>--global</c> option, because then Git will always use that information for anything you do on that system. If you want to override this with a different name or email address for specific projects, you can run the command without the <c>--global</c> option when you’re in that project.
	</p>
	<p>
		Now that your identity is set up, you can configure the default text editor that will be used when Git needs you to type in a message. If not configured, Git uses your system’s default editor. 
	</p>
	<p>
		If you want to use a non-default text editor, such as VSCode, on a macOS system you may need to select "Shell Command: Install 'Code' command in path" from the Command Palette in VSCode. On a Windows system, if you want to use a different text editor, you must specify the full path to its executable file. This will be different depending on how your editor is packaged.
	</p>
	<p>
		After adding VSCode to your path, the following might work for changing your editor to VSCode:
	</p>
	<pre>
	git config  --global core.editor 'code --new-window --wait'
	</pre>

	<p>
		The <c>--wait</c> option is needed to wait for the VSCode window to close before returning to the terminal. So a new window will open in a new instance of VSCode, and once you save the file and close it, you will return to your terminal. 
	</p>

	<p> If you have that working, you can use VSCode to add some additional functionality .Git diff is a particularly useful command for reviewing changes before committing them to the repository.
		We will continue to use the <c>git diff</c> command in various ways throughout the rest of the chapter. To set up VSCode to handle <c>git diff</c> commands, we need to change the <c>git config</c> file. To get to it globally, type the following:
		</p>
		<pre>
		git config --global --edit
		</pre>
		<p>
		Then add the following lines to your git config file:
		</p>
		<pre>
	[diff]
		tool = default-difftool
	[difftool "default-difftool"]
		cmd = code --wait --diff $LOCAL $REMOTE
	[merge]
		tool = code
	[mergetool "code"]
		cmd = code --wait --merge $REMOTE $LOCAL $BASE $MERGED
		</pre>
		<p>See <url href="https://code.visualstudio.com/docs/sourcecontrol/overview#_vs-code-as-git-difftool-and-mergetool" visual="code.visualstudio.com/docs/sourcecontrol/overview">VS Code as Git difftool and mergetool</url>
		</p>

	</subsection>

<conclusion>
<title>Conclusion</title>


	<p>
	You should now have a basic understanding of different types of VCSs, as well as some of their advantages and disadvantages. You should also now know what Git is and should also now have a working version of Git set-up on your system. In the next section, we will learn some Git basics.
	</p>
</conclusion>
<exercise xml:id="SecGitGettingStarted">
	<statement>
	  <p>
		What is the purpose of the Git staging area (Git index)?
	  </p>
	</statement>
	<choices randomize = "yes">
	  <choice>
		<statement>
		  <p>
			The Git staging area is a file where committed snapshots of the project are stored along with their associated metadata.
		  </p>
		</statement>
		<feedback>
		  <p>
			This option describes the purpose of the Git repository itself, not specifically the staging area.
		</p>
		</feedback>
	  </choice>
	  <choice>
		<statement>
		  <p>
			The Git staging area continuously monitors the resource status of files and the file system in a local repository.
		  </p>
		</statement>
		<feedback>
		  <p>
			This option describes a monitoring function, which is not the main purpose of the Git staging area.
		  </p>
		</feedback>
	  </choice>
	  <choice correct = "yes">
		<statement>
		  <p>
			The Git staging area is used to selectively add a list of changes that will be part of the next commit.
		  </p>
		</statement>
		<feedback>
		  <p>
			Correct! The Git staging area, also known as the Git index, is used to selectively stage changes to files that will be part of the next commit. It allows developers to control which modifications are included in a commit, helping create clean and organized commits.
		  </p>
		</feedback>
	  </choice>
	  <choice>
		<statement>
		  <p>
			The Git staging area is where all the committed snapshots of the project are stored.
		</p>
		</statement>
		<feedback>
		  <p>
			This option incorrectly states that all committed snapshots of the project are stored in the staging area, whereas the staging area is just a step before creating a commit.
		  </p>
		</feedback>
	  </choice>
	</choices>
</exercise>

</section>

